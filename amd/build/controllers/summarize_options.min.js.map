{"version":3,"file":"summarize_options.min.js","sources":["../../src/controllers/summarize_options.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controller for the main selection.\n *\n * @module      tiny_ai/controllers/summarize_options\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {prefetchStrings} from 'core/prefetch';\nimport {constants} from 'tiny_ai/constants';\nimport * as Renderer from 'tiny_ai/renderer';\nimport SELECTORS from 'tiny_ai/selectors';\n\nexport default class {\n\n    constructor(baseSelector) {\n        this.baseElement = document.querySelector(baseSelector);\n    }\n\n    async init() {\n        const modalFooter = document.querySelector(SELECTORS.modalFooter);\n        const backButton = modalFooter.querySelector('[data-action=\"back\"]');\n        const generateButton = modalFooter.querySelector('[data-action=\"generate\"]');\n        const showPromptButton = this.baseElement.querySelector('[data-action=\"showprompt\"]');\n\n        if (backButton) {\n            backButton.addEventListener('click', async() => {\n                await Renderer.renderStart(constants.modalModes.selection);\n            });\n        }\n\n        if (generateButton) {\n            generateButton.addEventListener('click', async() => {\n                await Renderer.renderLoading();\n                // TODO remove again, just a delay until we have a real AI interaction\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                //await aiAnswer = makeRequest(...)\n                await Renderer.renderSuggestion(\"BLINDTEXT\");\n\n\n            });\n        }\n\n        if (showPromptButton) {\n            showPromptButton.addEventListener('click', async() => {\n                const expanded = showPromptButton.dataset.hasOwnProperty('expanded') && showPromptButton.dataset.expanded.length > 0;\n                await Renderer.renderSummarize(!expanded);\n            })\n        }\n    }\n}\n"],"names":["constructor","baseSelector","baseElement","document","querySelector","modalFooter","SELECTORS","backButton","generateButton","showPromptButton","this","addEventListener","async","Renderer","renderStart","constants","modalModes","selection","renderLoading","Promise","resolve","setTimeout","renderSuggestion","expanded","dataset","hasOwnProperty","length","renderSummarize"],"mappings":";;;;;;;;4GA+BIA,YAAYC,mBACHC,YAAcC,SAASC,cAAcH,iCAIpCI,YAAcF,SAASC,cAAcE,mBAAUD,aAC/CE,WAAaF,YAAYD,cAAc,wBACvCI,eAAiBH,YAAYD,cAAc,4BAC3CK,iBAAmBC,KAAKR,YAAYE,cAAc,8BAEpDG,YACAA,WAAWI,iBAAiB,SAASC,gBAC3BC,SAASC,YAAYC,qBAAUC,WAAWC,cAIpDT,gBACAA,eAAeG,iBAAiB,SAASC,gBAC/BC,SAASK,sBAET,IAAIC,SAAQC,SAAWC,WAAWD,QAAS,aAE3CP,SAASS,iBAAiB,gBAMpCb,kBACAA,iBAAiBE,iBAAiB,SAASC,gBACjCW,SAAWd,iBAAiBe,QAAQC,eAAe,aAAehB,iBAAiBe,QAAQD,SAASG,OAAS,QAC7Gb,SAASc,iBAAiBJ"}