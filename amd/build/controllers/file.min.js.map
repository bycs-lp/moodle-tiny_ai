{"version":3,"file":"file.min.js","sources":["../../src/controllers/file.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controller for handling the show/hide prompt button and the associated textarea.\n *\n * @module      tiny_ai/controllers/file\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {getDatamanager, getCurrentModalUniqId, getIttHandler} from 'tiny_ai/utils';\nimport Templates from 'core/templates';\nimport SELECTORS from 'tiny_ai/selectors';\nimport {errorAlert} from 'tiny_ai/utils';\nimport * as BasedataHandler from 'tiny_ai/datahandler/basedata';\nimport {getString} from 'core/str';\n\n\nexport default class {\n\n    dropzone = null;\n    dropzoneContentToResetTo = '';\n\n    constructor(baseSelector) {\n        this.baseElement = document.querySelector(baseSelector);\n    }\n\n    async init() {\n        this.dropzone = this.baseElement.querySelector('[data-type=\"dropzone\"]');\n        const dropzone = this.dropzone;\n        // Setting contentEditable to true makes the browser show a \"paste\" option in the context menu when\n        // right-clicking the drop zone.\n        dropzone.contentEditable = true;\n        this.setDropzoneContent(dropzone.innerHTML);\n        // Instantly focus the drop zone, so you can directly paste the image.\n        dropzone.focus();\n\n        const _this = this;\n        // The drop zone has \"contentEditable\" enabled, so we have to take care of user input\n        // and reset the content whenever a user tries to input something.\n        dropzone.addEventListener('input', () => {\n            if (dropzone.innerHTML !== _this.dropzoneContentToResetTo) {\n                dropzone.innerHTML = _this.dropzoneContentToResetTo;\n            }\n        });\n        dropzone.addEventListener('drop', async(event) => {\n            event.preventDefault();\n\n            if (event.dataTransfer.items) {\n                // Use DataTransferItemList interface to access the file(s)\n                const item = [...event.dataTransfer.items].shift();\n                // If dropped item is no file, reject it.\n                if (item.kind === 'file') {\n                    await this.handleFile(item.getAsFile());\n                }\n            } else {\n                // Use DataTransfer interface to access the file(s)\n                await this.handleFile([...event.dataTransfer.files].shift());\n            }\n        });\n        document.querySelector(SELECTORS.modalDialog).addEventListener('paste', async(event) => {\n            event.preventDefault();\n            const clipboardData = (event.clipboardData || window.clipboardData);\n            if (clipboardData.files.length === 0) {\n                await errorAlert(BasedataHandler.getTinyAiString('error_nofileinclipboard_text'),\n                    BasedataHandler.getTinyAiString('error_nofileinclipboard_title'));\n                return;\n            }\n            const file = clipboardData.files[0];\n            this.handleFile(file);\n        });\n        dropzone.addEventListener('dragover', (event) => {\n            event.preventDefault();\n            dropzone.classList.remove('tiny_ai_dropzone_filled');\n            dropzone.classList.add('tiny_ai_dragover');\n        });\n        dropzone.addEventListener('dragleave', (event) => {\n            event.preventDefault();\n            dropzone.classList.remove('tiny_ai_dragover');\n        });\n\n        const datamanager = getDatamanager(getCurrentModalUniqId(this.baseElement));\n        if (datamanager.getSelectionImg() !== null) {\n            await this.handleFile(datamanager.getSelectionImg());\n        }\n    }\n\n    async handleFile(file) {\n        const reader = new FileReader();\n        const _this = this;\n        reader.addEventListener(\n            'load',\n            async() => {\n                const currentModalUniqid = getCurrentModalUniqId(this.baseElement);\n                const datamanager = getDatamanager(currentModalUniqid);\n                const fileUploadedEvent = new CustomEvent('fileUploaded', {\n                    detail: {\n                        newFile: reader.result,\n                    }\n                });\n                datamanager.getEventEmitterElement().dispatchEvent(fileUploadedEvent);\n                const ittHandler = getIttHandler(currentModalUniqid);\n                const allowedMimetypes = await ittHandler.getAllowedMimetypes();\n\n                if (!allowedMimetypes.includes(file.type)) {\n                    const errorTitle = await getString('error_unsupportedfiletype_title', 'tiny_ai');\n                    const errorText = await getString('error_unsupportedfiletype_text', 'tiny_ai', allowedMimetypes.toString());\n                    await errorAlert(errorText, errorTitle);\n                    return;\n                }\n\n                const fileEntryTemplateContext = {\n                    icon: file.type === 'application/pdf' ? 'fa-file-pdf' : 'fa-image',\n                    filename: file.name ? file.name : BasedataHandler.getTinyAiString('imagefromeditor'),\n                };\n                if (file.type.startsWith('image')) {\n                    fileEntryTemplateContext.isImage = true;\n                    fileEntryTemplateContext.dataurl = reader.result;\n                }\n                const {html, js} = await Templates.renderForPromise('tiny_ai/components/ai-file-list-entry',\n                    fileEntryTemplateContext);\n                _this.setDropzoneContent(html);\n                // We probably have no JS, but let's be safe here.\n                Templates.runTemplateJS(js);\n                // There should be no tiny_ai_dragover class, just to be safe.\n                _this.dropzone.classList.remove('tiny_ai_dragover');\n                _this.dropzone.classList.add('tiny_ai_dropzone_filled');\n            },\n            false,\n        );\n        reader.readAsDataURL(file);\n    }\n\n    setDropzoneContent(html) {\n        this.dropzone.innerHTML = html;\n        // Keep track of the state.\n        this.dropzoneContentToResetTo = html;\n    }\n}\n"],"names":["constructor","baseSelector","baseElement","document","querySelector","dropzone","this","contentEditable","setDropzoneContent","innerHTML","focus","_this","addEventListener","dropzoneContentToResetTo","async","event","preventDefault","dataTransfer","items","item","shift","kind","handleFile","getAsFile","files","SELECTORS","modalDialog","clipboardData","window","length","BasedataHandler","getTinyAiString","file","classList","remove","add","datamanager","getSelectionImg","reader","FileReader","currentModalUniqid","fileUploadedEvent","CustomEvent","detail","newFile","result","getEventEmitterElement","dispatchEvent","ittHandler","allowedMimetypes","getAllowedMimetypes","includes","type","errorTitle","errorText","toString","fileEntryTemplateContext","icon","filename","name","startsWith","isImage","dataurl","html","js","Templates","renderForPromise","runTemplateJS","readAsDataURL"],"mappings":"olDAqCIA,YAAYC,8CAHD,sDACgB,SAGlBC,YAAcC,SAASC,cAAcH,gCAIrCI,SAAWC,KAAKJ,YAAYE,cAAc,gCACzCC,SAAWC,KAAKD,SAGtBA,SAASE,iBAAkB,OACtBC,mBAAmBH,SAASI,WAEjCJ,SAASK,cAEHC,MAAQL,KAGdD,SAASO,iBAAiB,SAAS,KAC3BP,SAASI,YAAcE,MAAME,2BAC7BR,SAASI,UAAYE,MAAME,6BAGnCR,SAASO,iBAAiB,QAAQE,MAAAA,WAC9BC,MAAMC,iBAEFD,MAAME,aAAaC,MAAO,OAEpBC,KAAO,IAAIJ,MAAME,aAAaC,OAAOE,QAEzB,SAAdD,KAAKE,YACCf,KAAKgB,WAAWH,KAAKI,wBAIzBjB,KAAKgB,WAAW,IAAIP,MAAME,aAAaO,OAAOJ,YAG5DjB,SAASC,cAAcqB,mBAAUC,aAAad,iBAAiB,SAASE,MAAAA,QACpEC,MAAMC,uBACAW,cAAiBZ,MAAMY,eAAiBC,OAAOD,iBAClB,IAA/BA,cAAcH,MAAMK,yBACd,qBAAWC,gBAAgBC,gBAAgB,gCAC7CD,gBAAgBC,gBAAgB,wCAGlCC,KAAOL,cAAcH,MAAM,QAC5BF,WAAWU,SAEpB3B,SAASO,iBAAiB,YAAaG,QACnCA,MAAMC,iBACNX,SAAS4B,UAAUC,OAAO,2BAC1B7B,SAAS4B,UAAUE,IAAI,uBAE3B9B,SAASO,iBAAiB,aAAcG,QACpCA,MAAMC,iBACNX,SAAS4B,UAAUC,OAAO,6BAGxBE,aAAc,0BAAe,gCAAsB9B,KAAKJ,cACxB,OAAlCkC,YAAYC,yBACN/B,KAAKgB,WAAWc,YAAYC,oCAIzBL,YACPM,OAAS,IAAIC,WACb5B,MAAQL,KACdgC,OAAO1B,iBACH,QACAE,gBACU0B,oBAAqB,gCAAsBlC,KAAKJ,aAChDkC,aAAc,yBAAeI,oBAC7BC,kBAAoB,IAAIC,YAAY,eAAgB,CACtDC,OAAQ,CACJC,QAASN,OAAOO,UAGxBT,YAAYU,yBAAyBC,cAAcN,yBAC7CO,YAAa,wBAAcR,oBAC3BS,uBAAyBD,WAAWE,0BAErCD,iBAAiBE,SAASnB,KAAKoB,MAAO,OACjCC,iBAAmB,kBAAU,kCAAmC,WAChEC,gBAAkB,kBAAU,iCAAkC,UAAWL,iBAAiBM,8BAC1F,qBAAWD,UAAWD,kBAI1BG,yBAA2B,CAC7BC,KAAoB,oBAAdzB,KAAKoB,KAA6B,cAAgB,WACxDM,SAAU1B,KAAK2B,KAAO3B,KAAK2B,KAAO7B,gBAAgBC,gBAAgB,oBAElEC,KAAKoB,KAAKQ,WAAW,WACrBJ,yBAAyBK,SAAU,EACnCL,yBAAyBM,QAAUxB,OAAOO,cAExCkB,KAACA,KAADC,GAAOA,UAAYC,mBAAUC,iBAAiB,wCAChDV,0BACJ7C,MAAMH,mBAAmBuD,yBAEfI,cAAcH,IAExBrD,MAAMN,SAAS4B,UAAUC,OAAO,oBAChCvB,MAAMN,SAAS4B,UAAUE,IAAI,8BAEjC,GAEJG,OAAO8B,cAAcpC,MAGzBxB,mBAAmBuD,WACV1D,SAASI,UAAYsD,UAErBlD,yBAA2BkD"}