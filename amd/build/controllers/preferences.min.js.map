{"version":3,"file":"preferences.min.js","sources":["../../src/controllers/preferences.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controller for the main selection.\n *\n * @module      tiny_ai/controllers/summarize_options\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {prefetchStrings} from 'core/prefetch';\nimport {constants} from 'tiny_ai/constants';\nimport * as Renderer from 'tiny_ai/renderer';\nimport SELECTORS from 'tiny_ai/selectors';\nimport BaseController from 'tiny_ai/controllers/base';\nimport DataManager from 'tiny_ai/datamanager';\nimport SummarizeHandler from 'tiny_ai/datahandler/summarize';\n\nexport default class extends BaseController {\n\n\n    async init() {\n        const modalFooter = document.querySelector(SELECTORS.modalFooter);\n        const backButton = modalFooter.querySelector('[data-action=\"back\"]');\n        const generateButton = modalFooter.querySelector('[data-action=\"generate\"]');\n\n        switch(DataManager.getCurrentTool()) {\n            case 'summarize':\n                const maxWordCountElement = this.baseElement.querySelector('[data-preference=\"maxWordCount\"]');\n                const languageTypeElement = this.baseElement.querySelector('[data-preference=\"languageType\"]');\n                SummarizeHandler.setMaxWordCount(maxWordCountElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                SummarizeHandler.setLanguageType(languageTypeElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                DataManager.setCurrentPrompt(SummarizeHandler.getPrompt())\n                maxWordCountElement.addEventListener('dropdownSelectionUpdated', event => {\n                    SummarizeHandler.setMaxWordCount(event.detail.newValue);\n                    DataManager.setCurrentPrompt(SummarizeHandler.getPrompt())\n                    console.log(DataManager.getCurrentPrompt())\n                });\n                languageTypeElement.addEventListener('dropdownSelectionUpdated', event => {\n                    SummarizeHandler.setLanguageType(event.detail.newValue);\n                    DataManager.setCurrentPrompt(SummarizeHandler.getPrompt())\n                    console.log(DataManager.getCurrentPrompt())\n                });\n        }\n\n        console.log(DataManager.getCurrentPrompt())\n\n        if (backButton) {\n            backButton.addEventListener('click', async() => {\n                await Renderer.renderStart(constants.modalModes.selection);\n            });\n        }\n\n        if (generateButton) {\n            generateButton.addEventListener('click', async() => {\n                await Renderer.renderLoading();\n                // TODO remove again, just a delay until we have a real AI interaction\n                const result = await SummarizeHandler.getAiAnswer();\n                if (result === null) {\n                    this.callRendererFunction();\n                    return;\n                }\n                await Renderer.renderSuggestion(result);\n            });\n        }\n\n    }\n}\n"],"names":["BaseController","modalFooter","document","querySelector","SELECTORS","backButton","generateButton","DataManager","getCurrentTool","maxWordCountElement","this","baseElement","languageTypeElement","setMaxWordCount","dataset","value","setLanguageType","setCurrentPrompt","SummarizeHandler","getPrompt","addEventListener","event","detail","newValue","console","log","getCurrentPrompt","async","Renderer","renderStart","constants","modalModes","selection","renderLoading","result","getAiAnswer","renderSuggestion","callRendererFunction"],"mappings":";;;;;;;;yNAgC6BA,iCAIfC,YAAcC,SAASC,cAAcC,mBAAUH,aAC/CI,WAAaJ,YAAYE,cAAc,wBACvCG,eAAiBL,YAAYE,cAAc,+BAGxC,cADFI,qBAAYC,wBAELC,oBAAsBC,KAAKC,YAAYR,cAAc,oCACrDS,oBAAsBF,KAAKC,YAAYR,cAAc,uDAC1CU,gBAAgBJ,oBAAoBN,cAAc,4BAA4BW,QAAQC,0BACtFC,gBAAgBJ,oBAAoBT,cAAc,4BAA4BW,QAAQC,4BAC3FE,iBAAiBC,mBAAiBC,aAC9CV,oBAAoBW,iBAAiB,4BAA4BC,2BAC5CR,gBAAgBQ,MAAMC,OAAOC,+BAClCN,iBAAiBC,mBAAiBC,aAC9CK,QAAQC,IAAIlB,qBAAYmB,uBAE5Bd,oBAAoBQ,iBAAiB,4BAA4BC,2BAC5CL,gBAAgBK,MAAMC,OAAOC,+BAClCN,iBAAiBC,mBAAiBC,aAC9CK,QAAQC,IAAIlB,qBAAYmB,uBAIpCF,QAAQC,IAAIlB,qBAAYmB,oBAEpBrB,YACAA,WAAWe,iBAAiB,SAASO,gBAC3BC,SAASC,YAAYC,qBAAUC,WAAWC,cAIpD1B,gBACAA,eAAec,iBAAiB,SAASO,gBAC/BC,SAASK,sBAETC,aAAehB,mBAAiBiB,cACvB,OAAXD,aAIEN,SAASQ,iBAAiBF,aAHvBG"}