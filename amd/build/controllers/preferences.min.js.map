{"version":3,"file":"preferences.min.js","sources":["../../src/controllers/preferences.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controller for the main selection.\n *\n * @module      tiny_ai/controllers/translate\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {prefetchStrings} from 'core/prefetch';\nimport {constants} from 'tiny_ai/constants';\nimport * as Renderer from 'tiny_ai/renderer';\nimport SELECTORS from 'tiny_ai/selectors';\nimport BaseController from 'tiny_ai/controllers/base';\nimport DataManager from 'tiny_ai/datamanager';\nimport SummarizeHandler from 'tiny_ai/datahandler/summarize';\nimport TranslateHandler from 'tiny_ai/datahandler/translate';\nimport {getAiAnswer} from 'tiny_ai/utils';\nimport TtsHandler from 'tiny_ai/datahandler/tts';\nimport ImggenHandler from 'tiny_ai/datahandler/imggen';\nimport {alert as Alert} from 'core/notification';\nimport * as BasedataHandler from 'tiny_ai/datahandler/basedata';\n\nexport default class extends BaseController {\n\n\n    async init() {\n        const modalFooter = document.querySelector(SELECTORS.modalFooter);\n        const backButton = modalFooter.querySelector('[data-action=\"back\"]');\n        const generateButton = modalFooter.querySelector('[data-action=\"generate\"]');\n\n        switch (DataManager.getCurrentTool()) {\n            case 'summarize':\n            case 'describe':\n                SummarizeHandler.setTool(DataManager.getCurrentTool());\n                const maxWordCountElement = this.baseElement.querySelector('[data-preference=\"maxWordCount\"]');\n                const languageTypeElement = this.baseElement.querySelector('[data-preference=\"languageType\"]');\n                SummarizeHandler.setMaxWordCount(maxWordCountElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                SummarizeHandler.setLanguageType(languageTypeElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                const currentPromptSummarize = await SummarizeHandler.getPrompt();\n                DataManager.setCurrentPrompt(currentPromptSummarize)\n                maxWordCountElement.addEventListener('dropdownSelectionUpdated', async(event) => {\n                    SummarizeHandler.setMaxWordCount(event.detail.newValue);\n                    const currentPrompt = await SummarizeHandler.getPrompt();\n                    DataManager.setCurrentPrompt(currentPrompt)\n                });\n                languageTypeElement.addEventListener('dropdownSelectionUpdated', async(event) => {\n                    SummarizeHandler.setLanguageType(event.detail.newValue);\n                    const currentPrompt = await SummarizeHandler.getPrompt();\n                    DataManager.setCurrentPrompt(currentPrompt);\n                });\n                break;\n            case 'translate':\n                const targetLanguageElement = this.baseElement.querySelector('[data-preference=\"targetLanguage\"]');\n                TranslateHandler.setTargetLanguage(targetLanguageElement.querySelector('[data-dropdown=\"select\"]').dataset.value)\n                const currentPromptTranslate = await TranslateHandler.getPrompt();\n                DataManager.setCurrentPrompt(currentPromptTranslate);\n                targetLanguageElement.addEventListener('dropdownSelectionUpdated', async(event) => {\n                    TranslateHandler.setTargetLanguage(event.detail.newValue);\n                    const currentPromptTranslate = await TranslateHandler.getPrompt();\n                    DataManager.setCurrentPrompt(currentPromptTranslate);\n                });\n                break;\n            case 'tts':\n            case 'audiogen':\n                const ttsTargetLanguageElement = this.baseElement.querySelector('[data-preference=\"targetLanguage\"]');\n                const voiceElement = this.baseElement.querySelector('[data-preference=\"voice\"]');\n                const genderElement = this.baseElement.querySelector('[data-preference=\"gender\"]');\n                if (ttsTargetLanguageElement) {\n                    TtsHandler.setTargetLanguage(ttsTargetLanguageElement.querySelector('[data-dropdown=\"select\"]').dataset.value)\n                    ttsTargetLanguageElement.addEventListener('dropdownSelectionUpdated', event => {\n                        TtsHandler.setTargetLanguage(event.detail.newValue);\n                        DataManager.setCurrentOptions(TtsHandler.getOptions());\n                    });\n                }\n                if (voiceElement) {\n                    TtsHandler.setVoice(voiceElement.querySelector('[data-dropdown=\"select\"]').dataset.value)\n                    voiceElement.addEventListener('dropdownSelectionUpdated', event => {\n                        TtsHandler.setVoice(event.detail.newValue);\n                        DataManager.setCurrentOptions(TtsHandler.getOptions());\n                    });\n                }\n                if (genderElement) {\n                    TtsHandler.setGender(genderElement.querySelector('[data-dropdown=\"select\"]').dataset.value)\n                    genderElement.addEventListener('dropdownSelectionUpdated', event => {\n                        TtsHandler.setGender(event.detail.newValue);\n                        DataManager.setCurrentOptions(TtsHandler.getOptions());\n                    });\n                }\n                DataManager.setCurrentPrompt(TtsHandler.getPrompt());\n                DataManager.setCurrentOptions(TtsHandler.getOptions());\n                break;\n            case 'imggen':\n                const sizesElement = this.baseElement.querySelector('[data-preference=\"sizes\"]');\n\n                if (sizesElement) {\n                    ImggenHandler.setSize(sizesElement.querySelector('[data-dropdown=\"select\"]').dataset.value)\n                    sizesElement.addEventListener('dropdownSelectionUpdated', event => {\n                        ImggenHandler.setSize(event.detail.newValue);\n                        DataManager.setCurrentOptions(ImggenHandler.getOptions());\n                    });\n                }\n                DataManager.setCurrentPrompt('');\n                DataManager.setCurrentOptions(ImggenHandler.getOptions());\n                break;\n        }\n\n        if (backButton) {\n            backButton.addEventListener('click', async () => {\n                await Renderer.renderStart(constants.modalModes.selection);\n            });\n        }\n\n        if (generateButton) {\n            generateButton.addEventListener('click', async () => {\n                if (DataManager.getCurrentPrompt() === null || DataManager.getCurrentPrompt().length === 0) {\n                    await Alert(BasedataHandler.getTinyAiString('generalerror'), BasedataHandler.getTinyAiString('error_nopromptgiven'));\n                    return;\n                }\n                await Renderer.renderLoading();\n                const result = await getAiAnswer(DataManager.getCurrentPrompt(), constants.toolPurposeMapping[DataManager.getCurrentTool()],\n                    DataManager.getCurrentOptions());\n                if (result === null) {\n                    this.callRendererFunction();\n                    return;\n                }\n                DataManager.setCurrentAiResult(result);\n                console.log(result)\n                await Renderer.renderSuggestion();\n            });\n        }\n    }\n}\n"],"names":["BaseController","modalFooter","document","querySelector","SELECTORS","backButton","generateButton","DataManager","getCurrentTool","setTool","maxWordCountElement","this","baseElement","languageTypeElement","setMaxWordCount","dataset","value","setLanguageType","currentPromptSummarize","SummarizeHandler","getPrompt","setCurrentPrompt","addEventListener","async","event","detail","newValue","currentPrompt","targetLanguageElement","setTargetLanguage","currentPromptTranslate","TranslateHandler","ttsTargetLanguageElement","voiceElement","genderElement","setCurrentOptions","TtsHandler","getOptions","setVoice","setGender","sizesElement","setSize","ImggenHandler","Renderer","renderStart","constants","modalModes","selection","getCurrentPrompt","length","BasedataHandler","getTinyAiString","renderLoading","result","toolPurposeMapping","getCurrentOptions","setCurrentAiResult","console","log","renderSuggestion","callRendererFunction"],"mappings":";;;;;;;;0fAsC6BA,iCAIfC,YAAcC,SAASC,cAAcC,mBAAUH,aAC/CI,WAAaJ,YAAYE,cAAc,wBACvCG,eAAiBL,YAAYE,cAAc,mCAEzCI,qBAAYC,sBACX,gBACA,8BACgBC,QAAQF,qBAAYC,wBAC/BE,oBAAsBC,KAAKC,YAAYT,cAAc,oCACrDU,oBAAsBF,KAAKC,YAAYT,cAAc,uDAC1CW,gBAAgBJ,oBAAoBP,cAAc,4BAA4BY,QAAQC,0BACtFC,gBAAgBJ,oBAAoBV,cAAc,4BAA4BY,QAAQC,aACjGE,6BAA+BC,mBAAiBC,iCAC1CC,iBAAiBH,wBAC7BR,oBAAoBY,iBAAiB,4BAA4BC,MAAAA,2BAC5CT,gBAAgBU,MAAMC,OAAOC,gBACxCC,oBAAsBR,mBAAiBC,iCACjCC,iBAAiBM,kBAEjCd,oBAAoBS,iBAAiB,4BAA4BC,MAAAA,2BAC5CN,gBAAgBO,MAAMC,OAAOC,gBACxCC,oBAAsBR,mBAAiBC,iCACjCC,iBAAiBM,4BAGhC,kBACKC,sBAAwBjB,KAAKC,YAAYT,cAAc,yDAC5C0B,kBAAkBD,sBAAsBzB,cAAc,4BAA4BY,QAAQC,aACrGc,6BAA+BC,mBAAiBX,iCAC1CC,iBAAiBS,wBAC7BF,sBAAsBN,iBAAiB,4BAA4BC,MAAAA,2BAC9CM,kBAAkBL,MAAMC,OAAOC,gBAC1CI,6BAA+BC,mBAAiBX,iCAC1CC,iBAAiBS,qCAGhC,UACA,iBACKE,yBAA2BrB,KAAKC,YAAYT,cAAc,sCAC1D8B,aAAetB,KAAKC,YAAYT,cAAc,6BAC9C+B,cAAgBvB,KAAKC,YAAYT,cAAc,8BACjD6B,wCACWH,kBAAkBG,yBAAyB7B,cAAc,4BAA4BY,QAAQC,OACxGgB,yBAAyBV,iBAAiB,4BAA4BE,qBACvDK,kBAAkBL,MAAMC,OAAOC,+BAC9BS,kBAAkBC,aAAWC,kBAG7CJ,4BACWK,SAASL,aAAa9B,cAAc,4BAA4BY,QAAQC,OACnFiB,aAAaX,iBAAiB,4BAA4BE,qBAC3Cc,SAASd,MAAMC,OAAOC,+BACrBS,kBAAkBC,aAAWC,kBAG7CH,6BACWK,UAAUL,cAAc/B,cAAc,4BAA4BY,QAAQC,OACrFkB,cAAcZ,iBAAiB,4BAA4BE,qBAC5Ce,UAAUf,MAAMC,OAAOC,+BACtBS,kBAAkBC,aAAWC,uCAGrChB,iBAAiBe,aAAWhB,kCAC5Be,kBAAkBC,aAAWC,wBAExC,eACKG,aAAe7B,KAAKC,YAAYT,cAAc,6BAEhDqC,+BACcC,QAAQD,aAAarC,cAAc,4BAA4BY,QAAQC,OACrFwB,aAAalB,iBAAiB,4BAA4BE,wBACxCiB,QAAQjB,MAAMC,OAAOC,+BACvBS,kBAAkBO,gBAAcL,uCAGxChB,iBAAiB,yBACjBc,kBAAkBO,gBAAcL,cAIhDhC,YACAA,WAAWiB,iBAAiB,SAASC,gBAC3BoB,SAASC,YAAYC,qBAAUC,WAAWC,cAIpDzC,gBACAA,eAAegB,iBAAiB,SAASC,aACE,OAAnChB,qBAAYyC,oBAAyE,IAA1CzC,qBAAYyC,mBAAmBC,yBACpE,uBAAMC,gBAAgBC,gBAAgB,gBAAiBD,gBAAgBC,gBAAgB,8BAG3FR,SAASS,sBACTC,aAAe,sBAAY9C,qBAAYyC,mBAAoBH,qBAAUS,mBAAmB/C,qBAAYC,kBACtGD,qBAAYgD,qBACD,OAAXF,6BAIQG,mBAAmBH,QAC/BI,QAAQC,IAAIL,cACNV,SAASgB,yBALNC"}