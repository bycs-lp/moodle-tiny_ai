{"version":3,"file":"preferences.min.js","sources":["../../src/controllers/preferences.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controller for the main selection.\n *\n * @module      tiny_ai/controllers/translate\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {prefetchStrings} from 'core/prefetch';\nimport {constants} from 'tiny_ai/constants';\nimport * as Renderer from 'tiny_ai/renderer';\nimport SELECTORS from 'tiny_ai/selectors';\nimport BaseController from 'tiny_ai/controllers/base';\nimport DataManager from 'tiny_ai/datamanager';\nimport SummarizeHandler from 'tiny_ai/datahandler/summarize';\nimport TranslateHandler from 'tiny_ai/datahandler/translate';\nimport {getAiAnswer} from 'tiny_ai/utils';\nimport TtsHandler from 'tiny_ai/datahandler/tts';\nimport ImggenHandler from 'tiny_ai/datahandler/imggen';\n\nexport default class extends BaseController {\n\n\n    async init() {\n        const modalFooter = document.querySelector(SELECTORS.modalFooter);\n        const backButton = modalFooter.querySelector('[data-action=\"back\"]');\n        const generateButton = modalFooter.querySelector('[data-action=\"generate\"]');\n\n        switch (DataManager.getCurrentTool()) {\n            case 'summarize':\n            case 'describe':\n                SummarizeHandler.setTool(DataManager.getCurrentTool());\n                const maxWordCountElement = this.baseElement.querySelector('[data-preference=\"maxWordCount\"]');\n                const languageTypeElement = this.baseElement.querySelector('[data-preference=\"languageType\"]');\n                SummarizeHandler.setMaxWordCount(maxWordCountElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                SummarizeHandler.setLanguageType(languageTypeElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                DataManager.setCurrentPrompt(SummarizeHandler.getPrompt())\n                maxWordCountElement.addEventListener('dropdownSelectionUpdated', event => {\n                    SummarizeHandler.setMaxWordCount(event.detail.newValue);\n                    DataManager.setCurrentPrompt(SummarizeHandler.getPrompt())\n                    console.log(DataManager.getCurrentPrompt())\n                });\n                languageTypeElement.addEventListener('dropdownSelectionUpdated', event => {\n                    SummarizeHandler.setLanguageType(event.detail.newValue);\n                    DataManager.setCurrentPrompt(SummarizeHandler.getPrompt())\n                });\n                break;\n            case 'translate':\n                const targetLanguageElement = this.baseElement.querySelector('[data-preference=\"targetLanguage\"]');\n                TranslateHandler.setTargetLanguage(targetLanguageElement.querySelector('[data-dropdown=\"select\"]').dataset.value)\n                DataManager.setCurrentPrompt(TranslateHandler.getPrompt());\n                targetLanguageElement.addEventListener('dropdownSelectionUpdated', event => {\n                    TranslateHandler.setTargetLanguage(event.detail.newValue);\n                    DataManager.setCurrentPrompt(TranslateHandler.getPrompt())\n                });\n                break;\n            case 'tts':\n            case 'audiogen':\n                const ttsTargetLanguageElement = this.baseElement.querySelector('[data-preference=\"targetLanguage\"]');\n                const voiceElement = this.baseElement.querySelector('[data-preference=\"voice\"]');\n                const genderElement = this.baseElement.querySelector('[data-preference=\"gender\"]');\n                if (ttsTargetLanguageElement) {\n                    TtsHandler.setTargetLanguage(ttsTargetLanguageElement.querySelector('[data-dropdown=\"select\"]').dataset.value)\n                    ttsTargetLanguageElement.addEventListener('dropdownSelectionUpdated', event => {\n                        TtsHandler.setTargetLanguage(event.detail.newValue);\n                        DataManager.setCurrentOptions(TtsHandler.getOptions());\n                    });\n                }\n                if (voiceElement) {\n                    TtsHandler.setVoice(voiceElement.querySelector('[data-dropdown=\"select\"]').dataset.value)\n                    voiceElement.addEventListener('dropdownSelectionUpdated', event => {\n                        TtsHandler.setVoice(event.detail.newValue);\n                        DataManager.setCurrentOptions(TtsHandler.getOptions());\n                    });\n                }\n                if (genderElement) {\n                    TtsHandler.setGender(genderElement.querySelector('[data-dropdown=\"select\"]').dataset.value)\n                    genderElement.addEventListener('dropdownSelectionUpdated', event => {\n                        TtsHandler.setGender(event.detail.newValue);\n                        DataManager.setCurrentOptions(TtsHandler.getOptions());\n                    });\n                }\n                DataManager.setCurrentPrompt(TtsHandler.getPrompt());\n                break;\n            case 'imggen':\n                const sizesElement = this.baseElement.querySelector('[data-preference=\"sizes\"]');\n\n                if (sizesElement) {\n                    ImggenHandler.setSize(sizesElement.querySelector('[data-dropdown=\"select\"]').dataset.value)\n                    sizesElement.addEventListener('dropdownSelectionUpdated', event => {\n                        ImggenHandler.setSize(event.detail.newValue);\n                        DataManager.setCurrentOptions(ImggenHandler.getOptions());\n                    });\n                }\n                DataManager.setCurrentPrompt('');\n                break;\n        }\n\n        if (backButton) {\n            backButton.addEventListener('click', async () => {\n                await Renderer.renderStart(constants.modalModes.selection);\n            });\n        }\n\n        if (generateButton) {\n            generateButton.addEventListener('click', async () => {\n                if (DataManager.getCurrentPrompt() === null || DataManager.getCurrentPrompt().length === 0) {\n                    await alert('BITTE EINEN PROMPT EINGEBEN');\n                    return;\n                }\n                await Renderer.renderLoading();\n                const result = await getAiAnswer(DataManager.getCurrentPrompt(), constants.toolPurposeMapping[DataManager.getCurrentTool()],\n                    DataManager.getCurrentOptions());\n                if (result === null) {\n                    this.callRendererFunction();\n                    return;\n                }\n                DataManager.setCurrentAiResult(result);\n                console.log(result)\n                await Renderer.renderSuggestion();\n            });\n        }\n    }\n}\n"],"names":["BaseController","modalFooter","document","querySelector","SELECTORS","backButton","generateButton","DataManager","getCurrentTool","setTool","maxWordCountElement","this","baseElement","languageTypeElement","setMaxWordCount","dataset","value","setLanguageType","setCurrentPrompt","SummarizeHandler","getPrompt","addEventListener","event","detail","newValue","console","log","getCurrentPrompt","targetLanguageElement","setTargetLanguage","TranslateHandler","ttsTargetLanguageElement","voiceElement","genderElement","setCurrentOptions","TtsHandler","getOptions","setVoice","setGender","sizesElement","setSize","ImggenHandler","async","Renderer","renderStart","constants","modalModes","selection","length","alert","renderLoading","result","toolPurposeMapping","getCurrentOptions","setCurrentAiResult","renderSuggestion","callRendererFunction"],"mappings":";;;;;;;;iVAoC6BA,iCAIfC,YAAcC,SAASC,cAAcC,mBAAUH,aAC/CI,WAAaJ,YAAYE,cAAc,wBACvCG,eAAiBL,YAAYE,cAAc,mCAEzCI,qBAAYC,sBACX,gBACA,8BACgBC,QAAQF,qBAAYC,wBAC/BE,oBAAsBC,KAAKC,YAAYT,cAAc,oCACrDU,oBAAsBF,KAAKC,YAAYT,cAAc,uDAC1CW,gBAAgBJ,oBAAoBP,cAAc,4BAA4BY,QAAQC,0BACtFC,gBAAgBJ,oBAAoBV,cAAc,4BAA4BY,QAAQC,4BAC3FE,iBAAiBC,mBAAiBC,aAC9CV,oBAAoBW,iBAAiB,4BAA4BC,2BAC5CR,gBAAgBQ,MAAMC,OAAOC,+BAClCN,iBAAiBC,mBAAiBC,aAC9CK,QAAQC,IAAInB,qBAAYoB,uBAE5Bd,oBAAoBQ,iBAAiB,4BAA4BC,2BAC5CL,gBAAgBK,MAAMC,OAAOC,+BAClCN,iBAAiBC,mBAAiBC,0BAGjD,kBACKQ,sBAAwBjB,KAAKC,YAAYT,cAAc,yDAC5C0B,kBAAkBD,sBAAsBzB,cAAc,4BAA4BY,QAAQC,4BAC/FE,iBAAiBY,mBAAiBV,aAC9CQ,sBAAsBP,iBAAiB,4BAA4BC,2BAC9CO,kBAAkBP,MAAMC,OAAOC,+BACpCN,iBAAiBY,mBAAiBV,0BAGjD,UACA,iBACKW,yBAA2BpB,KAAKC,YAAYT,cAAc,sCAC1D6B,aAAerB,KAAKC,YAAYT,cAAc,6BAC9C8B,cAAgBtB,KAAKC,YAAYT,cAAc,8BACjD4B,wCACWF,kBAAkBE,yBAAyB5B,cAAc,4BAA4BY,QAAQC,OACxGe,yBAAyBV,iBAAiB,4BAA4BC,qBACvDO,kBAAkBP,MAAMC,OAAOC,+BAC9BU,kBAAkBC,aAAWC,kBAG7CJ,4BACWK,SAASL,aAAa7B,cAAc,4BAA4BY,QAAQC,OACnFgB,aAAaX,iBAAiB,4BAA4BC,qBAC3Ce,SAASf,MAAMC,OAAOC,+BACrBU,kBAAkBC,aAAWC,kBAG7CH,6BACWK,UAAUL,cAAc9B,cAAc,4BAA4BY,QAAQC,OACrFiB,cAAcZ,iBAAiB,4BAA4BC,qBAC5CgB,UAAUhB,MAAMC,OAAOC,+BACtBU,kBAAkBC,aAAWC,uCAGrClB,iBAAiBiB,aAAWf,uBAEvC,eACKmB,aAAe5B,KAAKC,YAAYT,cAAc,6BAEhDoC,+BACcC,QAAQD,aAAapC,cAAc,4BAA4BY,QAAQC,OACrFuB,aAAalB,iBAAiB,4BAA4BC,wBACxCkB,QAAQlB,MAAMC,OAAOC,+BACvBU,kBAAkBO,gBAAcL,uCAGxClB,iBAAiB,IAIjCb,YACAA,WAAWgB,iBAAiB,SAASqB,gBAC3BC,SAASC,YAAYC,qBAAUC,WAAWC,cAIpDzC,gBACAA,eAAee,iBAAiB,SAASqB,aACE,OAAnCnC,qBAAYoB,oBAAyE,IAA1CpB,qBAAYoB,mBAAmBqB,yBACpEC,MAAM,qCAGVN,SAASO,sBACTC,aAAe,sBAAY5C,qBAAYoB,mBAAoBkB,qBAAUO,mBAAmB7C,qBAAYC,kBACtGD,qBAAY8C,qBACD,OAAXF,6BAIQG,mBAAmBH,QAC/B1B,QAAQC,IAAIyB,cACNR,SAASY,yBALNC"}