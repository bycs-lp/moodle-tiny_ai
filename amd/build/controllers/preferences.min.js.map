{"version":3,"file":"preferences.min.js","sources":["../../src/controllers/preferences.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controller for the main selection.\n *\n * @module      tiny_ai/controllers/translate\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {constants} from 'tiny_ai/constants';\nimport SELECTORS from 'tiny_ai/selectors';\nimport BaseController from 'tiny_ai/controllers/base';\nimport {getSummarizeHandler, getTranslateHandler, getTtsHandler, getImggenHandler} from 'tiny_ai/utils';\n\nexport default class extends BaseController {\n\n    async init() {\n        const modalFooter = document.querySelector(SELECTORS.modalFooter);\n        const backButton = modalFooter.querySelector('[data-action=\"back\"]');\n        const generateButton = modalFooter.querySelector('[data-action=\"generate\"]');\n\n        const [summarizeHandler, translateHandler, ttsHandler, imggenHandler] = [\n            getSummarizeHandler(this.uniqid),\n            getTranslateHandler(this.uniqid),\n            getTtsHandler(this.uniqid),\n            getImggenHandler(this.uniqid)\n        ];\n\n        switch (this.datamanager.getCurrentTool()) {\n            case 'summarize':\n            case 'describe': {\n                summarizeHandler.setTool(this.datamanager.getCurrentTool());\n                const maxWordCountElement = this.baseElement.querySelector('[data-preference=\"maxWordCount\"]');\n                const languageTypeElement = this.baseElement.querySelector('[data-preference=\"languageType\"]');\n                summarizeHandler.setMaxWordCount(maxWordCountElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                summarizeHandler.setLanguageType(languageTypeElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                const currentPromptSummarize = await summarizeHandler.getPrompt(this.datamanager.getSelectionText());\n                this.datamanager.setCurrentPrompt(currentPromptSummarize);\n                maxWordCountElement.addEventListener('dropdownSelectionUpdated', async (event) => {\n                    summarizeHandler.setMaxWordCount(event.detail.newValue);\n                    const currentPrompt = await summarizeHandler.getPrompt(this.datamanager.getSelectionText());\n                    this.datamanager.setCurrentPrompt(currentPrompt);\n                });\n                languageTypeElement.addEventListener('dropdownSelectionUpdated', async (event) => {\n                    summarizeHandler.setLanguageType(event.detail.newValue);\n                    const currentPrompt = await summarizeHandler.getPrompt(this.datamanager.getSelectionText());\n                    this.datamanager.setCurrentPrompt(currentPrompt);\n                });\n                break;\n            }\n            case 'translate': {\n                const targetLanguageElement = this.baseElement.querySelector('[data-preference=\"targetLanguage\"]');\n                translateHandler.setTargetLanguage(targetLanguageElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                const currentPromptTranslate = await translateHandler.getPrompt(this.datamanager.getSelectionText());\n                this.datamanager.setCurrentPrompt(currentPromptTranslate);\n                targetLanguageElement.addEventListener('dropdownSelectionUpdated', async (event) => {\n                    translateHandler.setTargetLanguage(event.detail.newValue);\n                    const currentPromptTranslate = await translateHandler.getPrompt(this.datamanager.getSelectionText());\n                    this.datamanager.setCurrentPrompt(currentPromptTranslate);\n                });\n                break;\n            }\n            case 'tts':\n            case 'audiogen': {\n                const ttsTargetLanguageElement = this.baseElement.querySelector('[data-preference=\"targetLanguage\"]');\n                const voiceElement = this.baseElement.querySelector('[data-preference=\"voice\"]');\n                const genderElement = this.baseElement.querySelector('[data-preference=\"gender\"]');\n                if (ttsTargetLanguageElement) {\n                    ttsHandler.setTargetLanguage(ttsTargetLanguageElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                    ttsTargetLanguageElement.addEventListener('dropdownSelectionUpdated', event => {\n                        ttsHandler.setTargetLanguage(event.detail.newValue);\n                        this.datamanager.setCurrentOptions(ttsHandler.getOptions());\n                    });\n                }\n                if (voiceElement) {\n                    ttsHandler.setVoice(voiceElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                    voiceElement.addEventListener('dropdownSelectionUpdated', event => {\n                        ttsHandler.setVoice(event.detail.newValue);\n                        this.datamanager.setCurrentOptions(ttsHandler.getOptions());\n                    });\n                }\n                if (genderElement) {\n                    ttsHandler.setGender(genderElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                    genderElement.addEventListener('dropdownSelectionUpdated', event => {\n                        ttsHandler.setGender(event.detail.newValue);\n                        this.datamanager.setCurrentOptions(ttsHandler.getOptions());\n                    });\n                }\n                this.datamanager.setCurrentPrompt(ttsHandler.getPrompt(this.datamanager.getCurrentTool(),\n                    this.datamanager.getSelectionText()));\n                this.datamanager.setCurrentOptions(ttsHandler.getOptions());\n                break;\n            }\n            case 'imggen': {\n                const sizesElement = this.baseElement.querySelector('[data-preference=\"sizes\"]');\n\n                if (sizesElement) {\n                    imggenHandler.setSize(sizesElement.querySelector('[data-dropdown=\"select\"]').dataset.value);\n                    sizesElement.addEventListener('dropdownSelectionUpdated', event => {\n                        imggenHandler.setSize(event.detail.newValue);\n                        this.datamanager.setCurrentOptions(imggenHandler.getOptions());\n                    });\n                }\n                this.datamanager.setCurrentPrompt('');\n                this.datamanager.setCurrentOptions(imggenHandler.getOptions());\n                break;\n            }\n        }\n\n        if (backButton) {\n            backButton.addEventListener('click', async () => {\n                await this.renderer.renderStart(constants.modalModes.selection);\n            });\n        }\n\n        if (generateButton) {\n            generateButton.addEventListener('click', async () => {\n                const result = await this.generateAiAnswer();\n                if (result === null) {\n                    return;\n                }\n                await this.renderer.renderSuggestion();\n            });\n        }\n    }\n}\n"],"names":["BaseController","modalFooter","document","querySelector","SELECTORS","backButton","generateButton","summarizeHandler","translateHandler","ttsHandler","imggenHandler","this","uniqid","datamanager","getCurrentTool","setTool","maxWordCountElement","baseElement","languageTypeElement","setMaxWordCount","dataset","value","setLanguageType","currentPromptSummarize","getPrompt","getSelectionText","setCurrentPrompt","addEventListener","async","event","detail","newValue","currentPrompt","targetLanguageElement","setTargetLanguage","currentPromptTranslate","ttsTargetLanguageElement","voiceElement","genderElement","setCurrentOptions","getOptions","setVoice","setGender","sizesElement","setSize","renderer","renderStart","constants","modalModes","selection","generateAiAnswer","renderSuggestion"],"mappings":"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"}