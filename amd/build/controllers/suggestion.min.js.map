{"version":3,"file":"suggestion.min.js","sources":["../../src/controllers/suggestion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Controller for the main selection.\n *\n * @module      tiny_ai/controllers/suggestion\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport {prefetchStrings} from 'core/prefetch';\nimport {constants} from 'tiny_ai/constants';\nimport * as Renderer from 'tiny_ai/renderer';\nimport SELECTORS from 'tiny_ai/selectors';\nimport BaseController from 'tiny_ai/controllers/base';\n\nexport default class extends BaseController {\n\n    async init() {\n        const resultText = this.baseElement.querySelector('[data-text=\"result\"]');\n\n        const trashButton = this.footer.querySelector('[data-action=\"delete\"]');\n        const regenerateButton = this.footer.querySelector('[data-action=\"regenerate\"]');\n\n        if (trashButton) {\n            trashButton.addEventListener('click', async() => {\n                await this.callRendererFunction();\n            });\n        }\n\n        /*if (generateButton) {\n            generateButton.addEventListener('click', async() => {\n                await Renderer.renderLoading();\n                // TODO remove again, just a delay until we have a real AI interaction\n                await new Promise(resolve => setTimeout(resolve, 1000));\n                //await aiAnswer = makeRequest(...)\n                await Renderer.renderSuggestion(\"BLINDTEXT\");\n\n\n            });\n        }*/\n    }\n}\n"],"names":["BaseController","this","baseElement","querySelector","trashButton","footer","addEventListener","async","callRendererFunction"],"mappings":";;;;;;;;yHA8B6BA,2BAGFC,KAAKC,YAAYC,cAAc,8BAE5CC,YAAcH,KAAKI,OAAOF,cAAc,0BACrBF,KAAKI,OAAOF,cAAc,8BAE/CC,aACAA,YAAYE,iBAAiB,SAASC,gBAC5BN,KAAKO"}