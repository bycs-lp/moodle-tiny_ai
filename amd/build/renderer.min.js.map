{"version":3,"file":"renderer.min.js","sources":["../src/renderer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @module      tiny_ai/renderer\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport AiModal from './modal';\nimport {SELECTORS} from 'tiny_ai/selectors';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport {getPurposeConfig} from 'local_ai_manager/config';\nimport ModalEvents from 'core/modal_events';\nimport {getDraftItemId} from 'editor_tiny/options';\nimport {getStrings} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\nimport {alert, exception as displayException} from 'core/notification';\nimport {renderInfoBox} from 'local_ai_manager/render_infobox';\nimport {getContextId} from 'editor_tiny/options';\nimport {getUserId} from 'tiny_ai/options';\nimport {renderUserQuota} from 'local_ai_manager/userquota';\nimport {call as fetchMany} from 'core/ajax';\nimport {selectionbarSource, toolbarSource, menubarSource} from 'tiny_ai/common';\nimport Log from 'core/log';\nimport Templates from 'core/templates';\nimport * as DataManager from 'tiny_ai/datamanager';\nimport {constants} from 'tiny_ai/constants';\nimport {getAiConfig} from 'local_ai_manager/config';\nimport SummarizeHandler from 'tiny_ai/datahandler/summarize';\n\n\nconst stringKeys = [\n    'back',\n    'generate',\n    'hideprompt',\n    'mainselection_heading',\n    'showprompt',\n    'toolname_audiogen',\n    'toolname_describe',\n    'toolname_describe_extension',\n    'toolname_imggen',\n    'toolname_summarize',\n    'toolname_summarize_extension',\n    'toolname_translate',\n    'toolname_translate_extension',\n    'toolname_tts',\n    'toolname_tts_extension',\n];\nlet aiConfig = null;\n\nprefetchStrings('tiny_ai', stringKeys);\nlet strings = {};\nlet modal = null;\nlet userId = null;\n\nexport const init = async (existingModal, userIdFromEditor) => {\n    modal = existingModal;\n    aiConfig = await getAiConfig();\n    const stringRequest = stringKeys.map(key => {\n        return {key, component: 'tiny_ai'}\n    });\n    [\n        strings.back,\n        strings.generate,\n        strings.hideprompt,\n        strings.mainselection_heading,\n        strings.showprompt,\n        strings.toolname_audiogen,\n        strings.toolname_describe,\n        strings.toolname_describe_extension,\n        strings.toolname_imggen,\n        strings.toolname_summarize,\n        strings.toolname_summarize_extension,\n        strings.toolname_translate,\n        strings.toolname_translate_extension,\n        strings.toolname_tts,\n        strings.toolname_tts_extension,\n    ] = await getStrings(stringRequest);\n};\n\nconst getBackAndGenerateButtonContext = () => {\n    return {\n        footer_buttons: [\n            {\n                hasText: true,\n                button_text: strings.back,\n                icon_left: true,\n                icon_right: false,\n                primary: false,\n                secondary: false,\n                tertiary: true,\n                iconname: 'arrow-left',\n                iconstyle: 'solid',\n                action: 'back'\n            },\n            {\n                hasText: true,\n                button_text: strings.generate,\n                icon_left: true,\n                icon_right: false,\n                primary: true,\n                secondary: false,\n                tertiary: false,\n                iconname: 'sparkle',\n                customicon: true,\n                action: 'generate'\n            }\n        ]\n    };\n}\n\nconst getReplaceButtonsContext = () => {\n    return {\n        footer_iconbuttons:\n            [\n                {\n                    action: 'delete',\n                    iconName: 'trash'\n                },\n                {\n                    action: 'regenerate',\n                    iconName: 'arrows-rotate'\n                }\n            ],\n        footer_buttons:\n            [\n                {\n                    action: 'insert',\n                    hasText: true,\n                    button_text: \"UNTEN EINFUEGEN\",\n                    icon_left: true,\n                    icon_right: false,\n                    secondary: true,\n                    iconname: 'text-insert-last',\n                    customicon: true\n                },\n                {\n                    action: 'replace',\n                    hasText: true,\n                    button_text: \"AUSWAHL ERSETZEN\",\n                    icon_left: true,\n                    icon_right: false,\n                    primary: true,\n                    iconname: 'check',\n                    iconstyle: 'solid'\n                }\n            ],\n    };\n};\n\nconst getInputContext = () => {\n    return {\n        input: [\n            {\n                iconname: 'sparkle',\n                customicon: true,\n                button: [\n                    {\n                        customicon: false,\n                        iconname: 'arrow-right',\n                        iconstyle: 'solid',\n                        icon_left: false,\n                        icon_right: true\n                    }\n                ]\n            }\n        ],\n    }\n}\n\nconst getShowPromptButtonContext = () => {\n    return {\n        hasText: true,\n        button_text: strings.showprompt,\n        icon_left: true,\n        icon_right: false,\n        tertiary: true,\n        iconname: 'eye',\n        iconstyle: 'solid',\n        action: 'showprompt',\n        textareatype: 'prompt',\n        collapsed: true\n    }\n};\n\nexport const getTemplateContextStart = async (mode) => {\n\n    const getPurposeConfig = (tool) => {\n        const toolPurpose = constants.toolPurposeMapping[tool];\n        return aiConfig.purposes.filter(purpose => purpose['purpose'] === toolPurpose)[0];\n    }\n\n    // TODO Test if this logic is correct\n    const isToolDisabled = (tool) => {\n        if (!aiConfig.tenantenabled && aiConfig.role !== 'role_basic') {\n            console.log(\"bla1\")\n            return true;\n        }\n        if (aiConfig.userlocked) {\n            console.log(\"bla2\")\n            return true;\n        }\n        const purposeInfo = getPurposeConfig(tool);\n        if (!purposeInfo.isconfigured && aiConfig.role !== 'role_basic') {\n            console.log(\"bla3\")\n            return true;\n        }\n        if (purposeInfo.limitreached) {\n            console.log(\"bla1\")\n            return true;\n        }\n        console.log(\"bla4\")\n        return false;\n    }\n\n    // TODO Test if this logic is correct\n    const isToolHidden = (tool) => {\n        if (aiConfig.role !== 'role_basic') {\n            return false;\n        }\n        if (!aiConfig.tenantenabled) {\n            return true;\n        }\n        const purposeInfo = getPurposeConfig(tool);\n        if (!purposeInfo.isconfigured) {\n            return true;\n        }\n        if (purposeInfo.limitreached) {\n            return true;\n        }\n        return false;\n    }\n\n    let toolButtons = [];\n    switch (mode) {\n        case 'selection':\n            toolButtons.push({\n                tool: strings.toolname_summarize,\n                description: strings.toolname_summarize_extension,\n                customicon: true,\n                iconname: 'shorten',\n                disabled: isToolDisabled('summarize'),\n                action: 'loadsummarize'\n            });\n            toolButtons.push({\n                tool: strings.toolname_translate,\n                description: strings.toolname_translate_extension,\n                iconname: 'language',\n                iconstyle: 'solid',\n                disabled: isToolDisabled('translate'),\n                action: 'loadtranslate'\n            });\n            toolButtons.push({\n                tool: strings.toolname_describe,\n                description: strings.toolname_describe_extension,\n                customicon: true,\n                iconname: 'extend',\n                disabled: isToolDisabled('describe'),\n                action: 'loaddescribe'\n            });\n            toolButtons.push({\n                tool: strings.toolname_tts,\n                description: strings.toolname_tts_extension,\n                iconstyle: 'solid',\n                iconname: 'microphone',\n                disabled: isToolDisabled('tts'),\n                action: 'loadtts'\n            });\n            break;\n        case 'general':\n            toolButtons.push({\n                tool: strings.toolname_audiogen,\n                iconstyle: 'solid',\n                iconname: 'microphone',\n                disabled: isToolDisabled('tts'),\n                action: 'loadtts'\n            });\n            toolButtons.push({\n                tool: strings.toolname_imggen,\n                iconstyle: 'solid',\n                iconname: 'image',\n                disabled: isToolDisabled('imggen'),\n                action: 'loadimggen'\n            });\n    }\n    toolButtons = toolButtons.filter(buttonContext => !isToolHidden(buttonContext.tool));\n\n    const templateContext = {\n        showIcon: true,\n        modal_headline: strings.mainselection_heading,\n        modal_buttons: toolButtons,\n    };\n    Object.assign(templateContext, getInputContext());\n    return templateContext;\n}\n\n\nexport const getTemplateContextSummarize = async (extendPrompt) => {\n    const context = {\n        modal_headline: \"Zusammenfassen des markierten Textes\",\n        showIcon: true\n    };\n    Object.assign(context, getShowPromptButtonContext());\n    Object.assign(context, getBackAndGenerateButtonContext());\n\n    const maxWordCountDropdownContext = {};\n    maxWordCountDropdownContext.preference = 'maxWordCount';\n    maxWordCountDropdownContext.dropdown_default = Object.values(SummarizeHandler.maxWordCountOptions)[0];\n    maxWordCountDropdownContext.dropdown_default_value = Object.keys(SummarizeHandler.maxWordCountOptions)[0];\n    maxWordCountDropdownContext.dropdown_description = 'MAXIMALE WORTANZAHL';\n    const maxWordCountDropdownOptions = [];\n    for (const [key, value] of Object.entries(SummarizeHandler.maxWordCountOptions)) {\n        maxWordCountDropdownOptions.push({\n            optionValue: key,\n            optionLabel: value,\n        })\n    }\n    delete maxWordCountDropdownOptions[Object.keys(SummarizeHandler.languageTypeOptions)[0]]\n    maxWordCountDropdownContext.dropdown_options = maxWordCountDropdownOptions;\n\n    const languageTypeDropdownContext = {};\n    languageTypeDropdownContext.preference = 'languageType';\n    languageTypeDropdownContext.dropdown_default = Object.values(SummarizeHandler.languageTypeOptions)[0];\n    languageTypeDropdownContext.dropdown_default_value = Object.keys(SummarizeHandler.languageTypeOptions)[0];\n    languageTypeDropdownContext.dropdown_description = 'ART DER SPRACHE';\n    const languageTypeDropdownOptions = [];\n    for (const [key, value] of Object.entries(SummarizeHandler.languageTypeOptions)) {\n        languageTypeDropdownOptions.push({\n            optionValue: key,\n            optionLabel: value,\n        })\n    }\n    delete languageTypeDropdownOptions[Object.keys(SummarizeHandler.languageTypeOptions)[0]];\n    languageTypeDropdownContext.dropdown_options = languageTypeDropdownOptions;\n\n\n    Object.assign(context, {\n        modal_dropdowns: [\n            maxWordCountDropdownContext,\n            languageTypeDropdownContext,\n        ]\n    })\n\n    return context;\n}\n\nexport const getTemplateContextTranslate = async () => {\n    const context = {\n        modal_headline: \"Übersetzen des markierten Textes\",\n        showIcon: true,\n        modal_dropdowns: [\n            {\n                preference: 'targetlanguage',\n                dropdown_description: 'Ausgabesprache',\n                dropdown_default: 'Englisch',\n                dropdown_options: [\n                    {\n                        optionLabel: \"Test 1\",\n                        optionValue: \"1\"\n                    },\n                    {\n                        optionLabel: \"Test 2\",\n                        optionValue: \"2\"\n                    },\n                    {\n                        optionLabel: \"Test 3\",\n                        optionValue: \"3\"\n                    },\n                    {\n                        optionLabel: \"Test 4\",\n                        optionValue: \"4\"\n                    }\n                ]\n            }\n        ],\n    };\n    Object.assign(context, getShowPromptButtonContext());\n    Object.assign(context, getBackAndGenerateButtonContext());\n    return context;\n}\n\nexport const getTemplateContextDescribe = async () => {\n    return {};\n}\n\nexport const getTemplateContextTts = async () => {\n    return {};\n}\n\nexport const getTemplateContextAudiogen = async () => {\n    return {};\n}\n\nexport const getTemplateContextImggen = async () => {\n    const context = {\n        modal_headline: \"BILDGENERIERUNG\",\n        showIcon: true,\n        modal_dropdowns: [\n            {\n                dropdown_description: \"AUFLOESUNG\",\n                dropdown_default: \"Keine Auswahl\",\n                dropdown_options: [\n                    {\n                        optionLabel: \"Test 1\",\n                        optionValue: \"1\"\n                    },\n                    {\n                        optionLabel: \"Test 2\",\n                        optionValue: \"2\"\n                    },\n                    {\n                        optionLabel: \"Test 3\",\n                        optionValue: \"3\"\n                    },\n                    {\n                        optionLabel: \"Test 4\",\n                        optionValue: \"4\"\n                    }\n                ]\n            },\n        ],\n        placeholder: \"BESCHREIBUNG DES BILDS EINGEBEN\",\n    };\n    Object.assign(context, getBackAndGenerateButtonContext())\n    return context;\n}\n\nexport const renderStart = async (mode) => {\n    const templateContext = await getTemplateContextStart(mode);\n    await renderModalContent('moodle-modal-body-start', 'moodle-modal-footer-info', templateContext);\n}\n\nexport const renderSummarize = async () => {\n    const templateContext = await getTemplateContextSummarize();\n    await renderModalContent('moodle-modal-body-preferences', 'moodle-modal-footer-generate', templateContext);\n}\n\nexport const renderTranslate = async () => {\n    const templateContext = await getTemplateContextTranslate();\n    await renderModalContent('moodle-modal-body-preferences', 'moodle-modal-footer-generate', templateContext);\n}\n\nexport const renderDescribe = async () => {\n    const templateContext = await getTemplateContextDescribe();\n    await renderModalContent('moodle-modal-body-preferences', 'moodle-modal-footer-generate', templateContext);\n}\n\nexport const renderTts = async () => {\n    const templateContext = await getTemplateContextTts();\n    await renderModalContent('moodle-modal-body-audio', 'moodle-modal-footer-generate', templateContext);\n}\n\nexport const renderAudiogen = async () => {\n    const templateContext = await getTemplateContextAudiogen();\n    await renderModalContent('moodle-modal-body-audio', 'moodle-modal-footer-generate', templateContext);\n}\n\nexport const renderImggen = async () => {\n    const templateContext = await getTemplateContextImggen();\n    await renderModalContent('moodle-modal-body-imggen', 'moodle-modal-footer-generate', templateContext);\n}\n\nexport const renderLoading = async () => {\n    const templateContext = {};\n    templateContext.modal_headline = \"KI GENERIERT\";\n    await renderModalContent('moodle-modal-body-loading', 'moodle-modal-footer-empty', templateContext);\n}\n\nexport const renderSuggestion = async (aiAnswer) => {\n    const templateContext = {};\n    templateContext.modal_headline = \"KI-VORSCHLAG\";\n    templateContext.result_text = aiAnswer;\n    Object.assign(templateContext, getReplaceButtonsContext());\n    await renderModalContent('moodle-modal-body-suggestion', 'moodle-modal-footer-replace', templateContext);\n}\n\n/**\n * Re-renders the content auf the modal once it has been created.\n *\n * @param bodyComponentTemplate the name of the body template to use (without the prefix 'tiny_ai/components/')\n * @param footerComponentTemplate the name of the footer template to use (without the prefix 'tiny_ai/components/')\n * @param templateContext the template context being used for all partial templates\n * @returns {Promise<void>} the async promise\n */\nexport const renderModalContent = async (bodyComponentTemplate, footerComponentTemplate, templateContext) => {\n    const result = await Promise.all([\n        Templates.renderForPromise('tiny_ai/components/moodle-modal-header-title', templateContext),\n        Templates.renderForPromise('tiny_ai/components/' + bodyComponentTemplate, templateContext),\n        Templates.renderForPromise('tiny_ai/components/' + footerComponentTemplate, templateContext)\n    ]);\n    if (templateContext.hasOwnProperty('modal_headline')) {\n        // If there is no headline specified, we keep the old one.\n        modal.setTitle(result[0].html);\n    }\n    modal.setBody(result[1].html);\n    modal.setFooter(result[2].html);\n    result.forEach((item) => {\n        Templates.runTemplateJS(item.js);\n    })\n    await insertInfoBox();\n    await insertUserQuotaBox();\n};\n\nexport const insertInfoBox = async () => {\n    // TODO extract used purposes\n    const infoBoxSelector = '[data-rendertarget=\"infobox\"]';\n    if (document.querySelector(infoBoxSelector)) {\n        await renderInfoBox('tiny_ai', userId, infoBoxSelector, ['singleprompt', 'tts', 'imggen']);\n    }\n};\n\nexport const insertUserQuotaBox = async () => {\n    const usageBoxSelector = '[data-rendertarget=\"usageinfo\"]';\n    if (document.querySelector(usageBoxSelector)) {\n        await renderUserQuota(usageBoxSelector, ['singleprompt', 'tts', 'imggen']);\n    }\n};\n"],"names":["stringKeys","aiConfig","strings","modal","async","existingModal","userIdFromEditor","stringRequest","map","key","component","back","generate","hideprompt","mainselection_heading","showprompt","toolname_audiogen","toolname_describe","toolname_describe_extension","toolname_imggen","toolname_summarize","toolname_summarize_extension","toolname_translate","toolname_translate_extension","toolname_tts","toolname_tts_extension","getBackAndGenerateButtonContext","footer_buttons","hasText","button_text","icon_left","icon_right","primary","secondary","tertiary","iconname","iconstyle","action","customicon","getShowPromptButtonContext","textareatype","collapsed","getTemplateContextStart","getPurposeConfig","tool","toolPurpose","constants","toolPurposeMapping","purposes","filter","purpose","isToolDisabled","tenantenabled","role","console","log","userlocked","purposeInfo","isconfigured","limitreached","toolButtons","mode","push","description","disabled","buttonContext","isToolHidden","templateContext","showIcon","modal_headline","modal_buttons","Object","assign","input","button","getTemplateContextSummarize","context","maxWordCountDropdownContext","dropdown_default","values","SummarizeHandler","maxWordCountOptions","dropdown_default_value","keys","dropdown_description","maxWordCountDropdownOptions","value","entries","optionValue","optionLabel","languageTypeOptions","dropdown_options","languageTypeDropdownContext","languageTypeDropdownOptions","modal_dropdowns","getTemplateContextTranslate","preference","getTemplateContextDescribe","getTemplateContextTts","getTemplateContextAudiogen","getTemplateContextImggen","placeholder","renderModalContent","result_text","aiAnswer","footer_iconbuttons","iconName","bodyComponentTemplate","footerComponentTemplate","result","Promise","all","Templates","renderForPromise","hasOwnProperty","setTitle","html","setBody","setFooter","forEach","item","runTemplateJS","js","insertInfoBox","insertUserQuotaBox","document","querySelector"],"mappings":"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"}