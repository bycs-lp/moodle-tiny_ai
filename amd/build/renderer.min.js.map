{"version":3,"file":"renderer.min.js","sources":["../src/renderer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @module      tiny_ai/renderer\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport AiModal from './modal';\nimport {SELECTORS} from 'tiny_ai/selectors';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport {getPurposeConfig} from 'local_ai_manager/config';\nimport ModalEvents from 'core/modal_events';\nimport {getDraftItemId} from 'editor_tiny/options';\nimport {getStrings} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\nimport {alert, exception as displayException} from 'core/notification';\nimport {renderInfoBox} from 'local_ai_manager/render_infobox';\nimport {getContextId} from 'editor_tiny/options';\nimport {getUserId} from 'tiny_ai/options';\nimport {renderUserQuota} from 'local_ai_manager/userquota';\nimport {call as fetchMany} from 'core/ajax';\nimport {selectionbarSource, toolbarSource, menubarSource} from 'tiny_ai/common';\nimport Log from 'core/log';\nimport Templates from 'core/templates';\nimport * as DataManager from 'tiny_ai/datamanager';\nimport {constants} from 'tiny_ai/constants';\nimport {getAiConfig} from 'local_ai_manager/config';\nimport {renderModalContent} from \"./utils\";\n\n\nconst stringKeys = [\n    'mainselection_heading',\n    'toolname_audiogen',\n    'toolname_describe',\n    'toolname_describe_extension',\n    'toolname_imggen',\n    'toolname_summarize',\n    'toolname_summarize_extension',\n    'toolname_translate',\n    'toolname_translate_extension',\n    'toolname_tts',\n    'toolname_tts_extension',\n];\nlet aiConfig = null;\n\nprefetchStrings('tiny_ai', stringKeys);\nlet strings = {};\n\nexport const init = async () => {\n    aiConfig = await getAiConfig();\n    const stringRequest = stringKeys.map(key => {\n        return {key, component: 'tiny_ai'}\n    });\n    [\n        strings.mainselection_heading,\n        strings.toolname_audiogen,\n        strings.toolname_describe,\n        strings.toolname_describe_extension,\n        strings.toolname_imggen,\n        strings.toolname_summarize,\n        strings.toolname_summarize_extension,\n        strings.toolname_translate,\n        strings.toolname_translate_extension,\n        strings.toolname_tts,\n        strings.toolname_tts_extension,\n    ] = await getStrings(stringRequest);\n};\n\nexport const getTemplateContextStart = async (mode) => {\n\n    const getPurposeConfig = (tool) => {\n        const toolPurpose = constants.toolPurposeMapping[tool];\n        return aiConfig.purposes.filter(purpose => purpose['purpose'] === toolPurpose)[0];\n    }\n\n    // TODO Test if this logic is correct\n    const isToolDisabled = (tool) => {\n        if (!aiConfig.tenantenabled && aiConfig.role !== 'role_basic') {\n            console.log(\"bla1\")\n            return true;\n        }\n        if (aiConfig.userlocked) {\n            console.log(\"bla2\")\n            return true;\n        }\n        const purposeInfo = getPurposeConfig(tool);\n        if (!purposeInfo.isconfigured && aiConfig.role !== 'role_basic') {\n            console.log(\"bla3\")\n            return true;\n        }\n        if (purposeInfo.limitreached) {\n            console.log(\"bla1\")\n            return true;\n        }\n        console.log(\"bla4\")\n        return false;\n    }\n\n    // TODO Test if this logic is correct\n    const isToolHidden = (tool) => {\n        if (aiConfig.role !== 'role_basic') {\n            return false;\n        }\n        if (!aiConfig.tenantenabled) {\n            return true;\n        }\n        const purposeInfo = getPurposeConfig(tool);\n        if (!purposeInfo.isconfigured) {\n            return true;\n        }\n        if (purposeInfo.limitreached) {\n            return true;\n        }\n        return false;\n    }\n\n    let toolButtons = [];\n    switch (mode) {\n        case 'selection':\n            toolButtons.push({\n                tool: strings.toolname_summarize,\n                description: strings.toolname_summarize_extension,\n                customicon: true,\n                iconname: 'shorten',\n                disabled: isToolDisabled('summarize'),\n                action: 'loadsummarize'\n            });\n            toolButtons.push({\n                tool: strings.toolname_translate,\n                description: strings.toolname_translate_extension,\n                iconname: 'language',\n                iconstyle: 'solid',\n                disabled: isToolDisabled('translate'),\n                action: 'loadtranslate'\n            });\n            toolButtons.push({\n                tool: strings.toolname_describe,\n                description: strings.toolname_describe_extension,\n                customicon: true,\n                iconname: 'extend',\n                disabled: isToolDisabled('describe'),\n                action: 'loaddescribe'\n            });\n            toolButtons.push({\n                tool: strings.toolname_tts,\n                description: strings.toolname_tts_extension,\n                iconstyle: 'solid',\n                iconname: 'microphone',\n                disabled: isToolDisabled('tts'),\n                action: 'loadtts'\n            });\n            break;\n        case 'general':\n            toolButtons.push({\n                tool: strings.toolname_audiogen,\n                iconstyle: 'solid',\n                iconname: 'microphone',\n                disabled: isToolDisabled('tts'),\n                action: 'loadtts'\n            });\n            toolButtons.push({\n                tool: strings.toolname_imggen,\n                iconstyle: 'solid',\n                iconname: 'image',\n                disabled: isToolDisabled('imggen'),\n                action: 'loadimggen'\n            });\n    }\n    toolButtons = toolButtons.filter(buttonContext => !isToolHidden(buttonContext.tool));\n\n    const templateContext = {\n        showIcon: true,\n        modal_headline: strings.mainselection_heading,\n        modal_buttons: toolButtons,\n        input: [\n            {\n                iconname: 'sparkle',\n                customicon: true,\n                button: [\n                    {\n                        customicon: false,\n                        iconname: 'arrow-right',\n                        iconstyle: 'solid',\n                        icon_left: false,\n                        icon_right: true\n                    }\n                ]\n            }\n        ],\n    };\n    return templateContext;\n}\n\n\nexport const getTemplateContextSummarize = async () => {\n    return {\n        modal_headline: \"Zusammenfassen des markierten Textes\",\n        showIcon: true,\n        modal_dropdowns: [\n            {\n                dropdown_description: \"Max. Anzahl der Wörter\",\n                dropdown_default: \"Keine Auswahl\",\n                dropdown_options: [\n                    {\n                        optionLabel: \"Test 1\",\n                        optionValue: \"1\"\n                    },\n                    {\n                        optionLabel: \"Test 2\",\n                        optionValue: \"2\"\n                    },\n                    {\n                        optionLabel: \"Test 3\",\n                        optionValue: \"3\"\n                    },\n                    {\n                        optionLabel: \"Test 4\",\n                        optionValue: \"4\"\n                    }\n                ]\n            },\n            {\n                dropdown_description: \"Art der Sprache\",\n                dropdown_default: \"Fachsprache\",\n                dropdown_options: [\n                   {\n                        \"optionLabel\": \"Test 1\",\n                        \"optionValue\": \"1\"\n                    },\n                    {\n                        \"optionLabel\": \"Test 2\",\n                        \"optionValue\": \"2\"\n                    },\n                    {\n                        \"optionLabel\": \"Test 3\",\n                        \"optionValue\": \"3\"\n                    },\n                    {\n                        \"optionLabel\": \"Test 4\",\n                        \"optionValue\": \"4\"\n                    }\n                ]\n            }\n        ],\n\n        hasText: true,\n        button_text: \"Prompt anzeigen\",\n        icon_left: true,\n        icon_right: false,\n        tertiary: true,\n        iconname: \"eye\",\n        iconstyle: \"solid\",\n\n        footer_buttons: [\n            {\n                hasText: true,\n                button_text: \"Zurück\",\n                icon_left: true,\n                icon_right: false,\n                tertiary: true,\n                iconname: \"arrow-left\",\n                iconstyle: \"solid\"\n            },\n            {\n                hasText: true,\n                button_text: \"Jetzt generieren\",\n                icon_left: true,\n                icon_right: false,\n                primary: true,\n                iconname: \"sparkle\",\n                customicon: true\n            }\n        ]\n    }\n}\n\nexport const getTemplateContextTranslate = async () => {\n    return {\n\n    };\n}\n\nexport const getTemplateContextDescribe = async () => {\n    return {\n\n    };\n}\n\nexport const getTemplateContextTts = async () => {\n    return {\n\n    };\n}\n\nexport const getTemplateContextAudiogen = async () => {\n    return {\n\n    };\n}\n\nexport const getTemplateContextImggen = async () => {\n    return {\n        modal_headline: \"BILDGENERIERUNG\",\n        showIcon: true,\n        modal_dropdowns: [\n            {\n                dropdown_description: \"AUFLOESUNG\",\n                dropdown_default: \"Keine Auswahl\",\n                dropdown_options: [\n                    {\n                        optionLabel: \"Test 1\",\n                        optionValue: \"1\"\n                    },\n                    {\n                        optionLabel: \"Test 2\",\n                        optionValue: \"2\"\n                    },\n                    {\n                        optionLabel: \"Test 3\",\n                        optionValue: \"3\"\n                    },\n                    {\n                        optionLabel: \"Test 4\",\n                        optionValue: \"4\"\n                    }\n                ]\n            },\n        ],\n        placeholder: \"BESCHREIBUNG DES BILDS EINGEBEN\",\n\n        footer_buttons: [\n            {\n                hasText: true,\n                button_text: \"Zurück\",\n                icon_left: true,\n                icon_right: false,\n                tertiary: true,\n                iconname: \"arrow-left\",\n                iconstyle: \"solid\"\n            },\n            {\n                hasText: true,\n                button_text: \"Jetzt generieren\",\n                icon_left: true,\n                icon_right: false,\n                primary: true,\n                iconname: \"sparkle\",\n                customicon: true\n            }\n        ]\n    };\n}\n\nexport const renderStart = async(mode) => {\n    const templateContext = await getTemplateContextStart(mode);\n    console.log(templateContext)\n    await renderModalContent('moodle-modal-body-start', 'moodle-modal-footer-info', templateContext);\n}\n\nexport const renderSummarize = async() => {\n    const templateContext = await getTemplateContextSummarize();\n    await renderModalContent('moodle-modal-body-summarize', 'moodle-modal-footer-generate', templateContext);\n}\n\nexport const renderTranslate = async() => {\n    const templateContext = await getTemplateContextTranslate();\n    await renderModalContent('moodle-modal-body-summarize', 'moodle-modal-footer-generate', templateContext);\n}\n\nexport const renderDescribe = async() => {\n    const templateContext = await getTemplateContextDescribe();\n    await renderModalContent('moodle-modal-body-summarize', 'moodle-modal-footer-generate', templateContext);\n}\n\nexport const renderTts = async() => {\n    const templateContext = await getTemplateContextTts();\n    await renderModalContent('moodle-modal-body-audio', 'moodle-modal-footer-generate', templateContext);\n}\n\nexport const renderAudiogen = async() => {\n    const templateContext = await getTemplateContextAudiogen();\n    await renderModalContent('moodle-modal-body-audio', 'moodle-modal-footer-generate', templateContext);\n}\n\nexport const renderImggen = async() => {\n    const templateContext = await getTemplateContextImggen();\n    await renderModalContent('moodle-modal-body-imggen', 'moodle-modal-footer-generate', templateContext);\n}\n\n"],"names":["stringKeys","aiConfig","strings","async","stringRequest","map","key","component","mainselection_heading","toolname_audiogen","toolname_describe","toolname_describe_extension","toolname_imggen","toolname_summarize","toolname_summarize_extension","toolname_translate","toolname_translate_extension","toolname_tts","toolname_tts_extension","getTemplateContextStart","getPurposeConfig","tool","toolPurpose","constants","toolPurposeMapping","purposes","filter","purpose","isToolDisabled","tenantenabled","role","console","log","userlocked","purposeInfo","isconfigured","limitreached","toolButtons","mode","push","description","customicon","iconname","disabled","action","iconstyle","buttonContext","isToolHidden","showIcon","modal_headline","modal_buttons","input","button","icon_left","icon_right","getTemplateContextSummarize","modal_dropdowns","dropdown_description","dropdown_default","dropdown_options","optionLabel","optionValue","hasText","button_text","tertiary","footer_buttons","primary","getTemplateContextTranslate","getTemplateContextDescribe","getTemplateContextTts","getTemplateContextAudiogen","getTemplateContextImggen","placeholder","templateContext"],"mappings":"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"}