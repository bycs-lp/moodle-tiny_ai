{"version":3,"file":"start.min.js","sources":["../../src/datahandler/start.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport * as config from 'core/config';\nimport {getString, getStrings} from 'core/str';\nimport {constants} from 'tiny_ai/constants';\nimport * as BasedataHandler from 'tiny_ai/datahandler/basedata';\nimport {getAiConfig} from 'local_ai_manager/config';\nimport {errorAlert, stripHtmlTags} from 'tiny_ai/utils';\n\n\n/**\n * Tiny AI data handler for start page.\n *\n * @module      tiny_ai/datahandler/start\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst StartHandler = new _StartHandler();\n\nclass _StartHandler {\n\n    stringKeys = [\n        'error_limitreached',\n        'error_pleaseconfirm',\n        'error_purposenotconfigured',\n        'error_tenantdisabled',\n        'error_unavailable_noselection',\n        'error_unavailable_selection',\n        'error_userlocked',\n        'error_usernotconfirmed'\n    ];\n\n    aiConfig = null;\n    strings = {};\n\n    async init() {\n        this.aiConfig = await getAiConfig();\n        // It's easier to fetch alle these strings before even if we do not use them\n        // instead of making all functions async just because of getString returning a promise.\n        const stringRequest = this.stringKeys.map(key => {\n            return {key, component: 'local_ai_manager'};\n        });\n\n        [\n            this.strings.error_limitreached,\n            this.strings.error_pleaseconfirm,\n            this.strings.error_purposenotconfigured,\n            this.strings.error_tenantdisabled,\n            this.strings.error_unavailable_noselection,\n            this.strings.error_unavailable_selection,\n            this.strings.error_userlocked,\n            this.strings.error_usernotconfirmed\n        ] = await getStrings(stringRequest);\n        this.strings.error_editor_notavailable = await getString('error_tiny_ai_notavailable', 'tiny_ai');\n        const confirmLink = document.createElement('a');\n        confirmLink.href = `${config.wwwroot}/local/ai_manager/confirm_ai_usage.php`;\n        confirmLink.innerText = this.strings.error_pleaseconfirm;\n        confirmLink.target = '_blank';\n        this.strings.combinedusernotconfirmederror = this.strings.error_usernotconfirmed + ' ' + confirmLink.outerHTML;\n    }\n\n    getPurposeConfig(tool) {\n        if (this.aiConfig === null) {\n            throw new Error('Coding error: init function was not called before accessing this.getPurposeConfig!');\n        }\n        const toolPurpose = constants.toolPurposeMapping[tool];\n        return this.aiConfig.purposes.filter(purpose => purpose['purpose'] === toolPurpose)[0];\n    }\n\n    isTinyAiDisabled() {\n        if (!this.aiConfig.tenantenabled) {\n            return this.strings.error_tenantdisabled;\n        }\n        if (!this.aiConfig.userconfirmed) {\n            return this.strings.combinedusernotconfirmederror;\n        }\n        if (this.aiConfig.userlocked) {\n            return this.strings.error_userlocked;\n        }\n        return '';\n    }\n\n    isToolDisabled(tool, mode) {\n        if (this.isTinyAiDisabled()) {\n            return this.isTinyAiDisabled();\n        }\n        const purposeInfo = this.getPurposeConfig(tool);\n        if (!purposeInfo.isconfigured) {\n            return this.strings.error_purposenotconfigured;\n        }\n        if (purposeInfo.limitreached) {\n            return this.strings.error_limitreached;\n        }\n\n        if (mode === constants.modalModes.selection) {\n            return ['audiogen', 'imggen'].includes(tool) ? this.strings.error_unavailable_noselection : '';\n        } else if (mode === constants.modalModes.general) {\n            return ['summarize', 'translate', 'describe', 'tts'].includes(tool) ? this.strings.error_unavailable_selection : '';\n        }\n    }\n\n    isToolHidden(tool) {\n        const purposeInfo = this.getPurposeConfig(tool);\n        // If the tenant is not allowed the plugin is being disabled completely, so we do not need\n        // to check this case here.\n        if (this.aiConfig.role === 'role_basic') {\n            if (!this.aiConfig.tenantenabled) {\n                return true;\n            }\n            if (!purposeInfo.isconfigured) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    async getTemplateContext(editorUtils) {\n        const mode = editorUtils.getMode();\n        let toolButtons = [];\n        if (this.aiConfig.role === 'role_basic' && this.isTinyAiDisabled()) {\n            await errorAlert(await getString('error_tiny_ai_notavailable', 'tiny_ai') + '<br/>'\n                + this.isTinyAiDisabled());\n            editorUtils.getModal().destroy();\n        }\n\n        if (!this.isToolHidden('summarize')) {\n            toolButtons.push({\n                toolname: 'summarize',\n                tool: BasedataHandler.getTinyAiString('toolname_summarize'),\n                description: BasedataHandler.getTinyAiString('toolname_summarize_extension'),\n                customicon: true,\n                iconname: 'shorten',\n                disabled: this.isToolDisabled('summarize', mode).length > 0,\n                tooltip: stripHtmlTags(this.isToolDisabled('summarize', mode)),\n                action: 'loadsummarize'\n            });\n        }\n        if (!this.isToolHidden('translate')) {\n            toolButtons.push({\n                toolname: 'translate',\n                tool: BasedataHandler.getTinyAiString('toolname_translate'),\n                description: BasedataHandler.getTinyAiString('toolname_translate_extension'),\n                iconname: 'language',\n                iconstyle: 'solid',\n                disabled: this.isToolDisabled('translate', mode).length > 0,\n                tooltip: stripHtmlTags(this.isToolDisabled('translate', mode)),\n                action: 'loadtranslate'\n            });\n        }\n        if (!this.isToolHidden('describe')) {\n            toolButtons.push({\n                toolname: 'describe',\n                tool: BasedataHandler.getTinyAiString('toolname_describe'),\n                description: BasedataHandler.getTinyAiString('toolname_describe_extension'),\n                customicon: true,\n                iconname: 'extend',\n                disabled: this.isToolDisabled('describe', mode).length > 0,\n                tooltip: stripHtmlTags(this.isToolDisabled('describe', mode)),\n                action: 'loaddescribe'\n            });\n        }\n        if (!this.isToolHidden('tts')) {\n            toolButtons.push({\n                toolname: 'tts',\n                tool: BasedataHandler.getTinyAiString('toolname_tts'),\n                description: BasedataHandler.getTinyAiString('toolname_tts_extension'),\n                iconstyle: 'solid',\n                iconname: 'microphone',\n                disabled: this.isToolDisabled('tts', mode).length > 0,\n                tooltip: stripHtmlTags(this.isToolDisabled('tts', mode)),\n                action: 'loadtts'\n            });\n        }\n        if (!this.isToolHidden('audiogen')) {\n            toolButtons.push({\n                toolname: 'audiogen',\n                tool: BasedataHandler.getTinyAiString('toolname_audiogen'),\n                iconstyle: 'solid',\n                iconname: 'microphone',\n                disabled: this.isToolDisabled('audiogen', mode).length > 0,\n                tooltip: stripHtmlTags(this.isToolDisabled('audiogen', mode)),\n                action: 'loadaudiogen'\n            });\n        }\n        if (!this.isToolHidden('imggen')) {\n            toolButtons.push({\n                toolname: 'imggen',\n                tool: BasedataHandler.getTinyAiString('toolname_imggen'),\n                iconstyle: 'solid',\n                iconname: 'image',\n                disabled: this.isToolDisabled('imggen', mode).length > 0,\n                tooltip: stripHtmlTags(this.isToolDisabled('imggen', mode)),\n                action: 'loadimggen'\n            });\n        }\n        // We sort the not disabled tools to the top while keeping the groups \"disabled tools\" and \"not disabled tools\"\n        // in the same order inside the groups.\n        toolButtons.sort((a, b) => {\n            if (a.disabled && !b.disabled) {\n                return 1;\n            } else if (b.disabled && !a.disabled) {\n                return -1;\n            } else {\n                return 0;\n            }\n        });\n\n        const templateContext = {\n            showIcon: true,\n            modal_headline: BasedataHandler.getTinyAiString('mainselection_heading'),\n            action: 'loadfreeprompt',\n            modal_buttons: toolButtons,\n            freeprompthidden: true\n        };\n        Object.assign(templateContext, BasedataHandler.getInputContext());\n        if (this.isTinyAiDisabled()) {\n            templateContext.input[0].disabled = true;\n            templateContext.input[0].hasError = true;\n            templateContext.input[0].errorMessage = this.isTinyAiDisabled();\n        }\n        if (this.isToolDisabled('freeprompt', mode)) {\n            templateContext.input[0].disabled = true;\n        }\n        return templateContext;\n    }\n}\n\nexport default StartHandler;\n"],"names":["StartHandler","aiConfig","stringRequest","this","stringKeys","map","key","component","strings","error_limitreached","error_pleaseconfirm","error_purposenotconfigured","error_tenantdisabled","error_unavailable_noselection","error_unavailable_selection","error_userlocked","error_usernotconfirmed","error_editor_notavailable","confirmLink","document","createElement","href","config","wwwroot","innerText","target","combinedusernotconfirmederror","outerHTML","getPurposeConfig","tool","Error","toolPurpose","constants","toolPurposeMapping","purposes","filter","purpose","isTinyAiDisabled","tenantenabled","userconfirmed","userlocked","isToolDisabled","mode","purposeInfo","isconfigured","limitreached","modalModes","selection","includes","general","isToolHidden","role","editorUtils","getMode","toolButtons","getModal","destroy","push","toolname","BasedataHandler","getTinyAiString","description","customicon","iconname","disabled","length","tooltip","action","iconstyle","sort","a","b","templateContext","showIcon","modal_headline","modal_buttons","freeprompthidden","Object","assign","getInputContext","input","hasError","errorMessage"],"mappings":"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"}