define("tiny_ai/datahandler/tts",["exports","local_ai_manager/make_request","tiny_ai/datamanager","core/notification","core/str","local_ai_manager/config"],(function(_exports,_make_request,_datamanager,_notification,_str,AiConfig){var obj;function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}
/**
   * Tiny AI data manager.
   *
   * @module      tiny_ai/datahandler/tts
   * @copyright   2024, ISB Bayern
   * @author      Philipp Memmel
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.default=void 0,_datamanager=(obj=_datamanager)&&obj.__esModule?obj:{default:obj},AiConfig=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(AiConfig);const TtsHandler=new class{constructor(){_defineProperty(this,"ttsOptions",null),_defineProperty(this,"targetLanguage",null),_defineProperty(this,"voice",null),_defineProperty(this,"gender",null),_defineProperty(this,"setTargetLanguage",(targetLanguage=>{this.targetLanguage=targetLanguage})),_defineProperty(this,"setVoice",(voice=>{this.voice=voice})),_defineProperty(this,"setGender",(gender=>{this.gender=gender}))}async getTargetLanguageOptions(){return await this.loadTtsOptions(),console.log(this.ttsOptions.languages),this.ttsOptions.languages}async getVoiceOptions(){return await this.loadTtsOptions(),console.log(this.ttsOptions.voices),this.ttsOptions.voices}async getGenderOptions(){return await this.loadTtsOptions(),this.ttsOptions.gender}getOptions(){if(null===this.targetLanguage&&null===this.voice&&null===this.gender)return{};const options={};return this.targetLanguage&&(options.languages=[this.targetLanguage]),this.voice&&(options.voices=[this.voice]),this.gender&&(options.gender=[this.gender]),options}getPrompt(){return"tts"===_datamanager.default.getCurrentTool()?_datamanager.default.getSelectionText():""}async loadTtsOptions(){if(null===this.ttsOptions){const fetchedOptions=await AiConfig.getPurposeOptions("tts");this.ttsOptions=JSON.parse(fetchedOptions.options)}}};var _default=TtsHandler;return _exports.default=_default,_exports.default}));

//# sourceMappingURL=tts.min.js.map