{"version":3,"file":"basedata.min.js","sources":["../../src/datahandler/basedata.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {getStrings} from 'core/str';\nimport {prefetchStrings} from 'core/prefetch';\nimport {constants} from 'tiny_ai/constants';\n\n/**\n * Tiny AI base data provider.\n *\n * @module      tiny_ai/datahandler/basedata\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst stringKeys = [\n    'aigenerating',\n    'aisuggestion',\n    'audiogen_headline',\n    'audiogen_placeholder',\n    'back',\n    'backbutton_tooltip',\n    'cancel',\n    'deletebutton_tooltip',\n    'describeimg_baseprompt',\n    'describeimg_headline',\n    'describe_baseprompt',\n    'describe_headline',\n    'dismiss',\n    'dismisssuggestion',\n    'error_nofile',\n    'error_nofileinclipboard_text',\n    'error_nofileinclipboard_title',\n    'error_nopromptgiven',\n    'freeprompt_placeholder',\n    'freepromptbutton_tooltip',\n    'gender',\n    'generalerror',\n    'generate',\n    'generatebutton_tooltip',\n    'hideprompt',\n    'imagefromeditor',\n    'imagetotext_baseprompt',\n    'imagetotext_headline',\n    'imagetotext_insertimage',\n    'imggen_headline',\n    'imggen_placeholder',\n    'insertatcaret',\n    'insertatcaret_tooltip',\n    'insertbelow',\n    'insertbelow_tooltip',\n    'keeplanguagetype',\n    'languagetype',\n    'languagetype_prompt',\n    'mainselection_heading',\n    'maxwordcount',\n    'maxwordcount_prompt',\n    'nomaxwordcount',\n    'regeneratebutton_tooltip',\n    'replaceselection',\n    'replaceselectionbutton_tooltip',\n    'reworkprompt',\n    'simplelanguage',\n    'size',\n    'showprompt',\n    'showpromptbutton_tooltip',\n    'summarize_baseprompt',\n    'summarize_headline',\n    'targetlanguage',\n    'technicallanguage',\n    'texttouse',\n    'toolname_audiogen',\n    'toolname_describe',\n    'toolname_describeimg',\n    'toolname_describe_extension',\n    'toolname_imggen',\n    'toolname_imagetotext',\n    'toolname_summarize',\n    'toolname_summarize_extension',\n    'toolname_translate',\n    'toolname_translate_extension',\n    'toolname_tts',\n    'toolname_tts_extension',\n    'translate_baseprompt',\n    'translate_headline',\n    'tts_headline',\n    'voice'\n];\n\nlet strings = new Map();\n\nexport const init = async() => {\n    prefetchStrings('tiny_ai', stringKeys);\n    const stringRequest = stringKeys.map(key => {\n        return {key, component: 'tiny_ai'};\n    });\n    // We now get the strings. They are already prefetched, so this is not a performance feature.\n    // We just use this to avoid having to code asynchronously all the time just for retrieving the\n    // strings by using getString which returns a promise.\n    const fetchedStrings = await getStrings(stringRequest);\n    for (let i = 0; i < stringKeys.length; i++) {\n        strings.set(stringKeys[i], fetchedStrings[i]);\n    }\n};\n\nexport const getTinyAiString = (string) => {\n    return strings.get(string);\n};\n\nexport const getBackAndGenerateButtonContext = () => {\n    return {\n        footerButtons: [\n            {\n                hasText: true,\n                buttonText: getTinyAiString('back'),\n                iconLeft: true,\n                iconRight: false,\n                primary: false,\n                secondary: false,\n                tertiary: true,\n                iconname: 'arrow-left',\n                iconstyle: 'solid',\n                action: 'back',\n                tooltip: getTinyAiString('backbutton_tooltip')\n            },\n            {\n                hasText: true,\n                buttonText: getTinyAiString('generate'),\n                iconLeft: true,\n                iconRight: false,\n                primary: true,\n                secondary: false,\n                tertiary: false,\n                iconname: 'sparkle',\n                customicon: true,\n                action: 'generate',\n                tooltip: getTinyAiString('generatebutton_tooltip')\n            }\n        ]\n    };\n};\n\nexport const getReplaceButtonsContext = (mode) => {\n\n    return {\n        footerIconButtons:\n            [\n                {\n                    action: 'delete',\n                    iconname: 'trash',\n                    tooltip: getTinyAiString('deletebutton_tooltip')\n                },\n                {\n                    action: 'regenerate',\n                    iconname: 'arrows-rotate',\n                    tooltip: getTinyAiString('regeneratebutton_tooltip')\n                }\n            ],\n        footerButtons:\n            [\n                {\n                    action: 'insertbelow',\n                    hasText: true,\n                    buttonText: getTinyAiString('insertbelow'),\n                    iconLeft: true,\n                    iconRight: false,\n                    secondary: true,\n                    iconname: 'text-insert-last',\n                    customicon: true,\n                    tooltip: getTinyAiString('insertbelow_tooltip')\n                },\n                {\n                    action: mode === constants.modalModes.selection ? 'replace' : 'insertatcaret',\n                    hasText: true,\n                    buttonText: mode === constants.modalModes.selection\n                        ? getTinyAiString('replaceselection') : getTinyAiString('insertatcaret'),\n                    iconLeft: true,\n                    iconRight: false,\n                    primary: true,\n                    iconname: 'check',\n                    iconstyle: 'solid',\n                    tooltip: mode === constants.modalModes.selection\n                        ? getTinyAiString('replaceselection_tooltip') : getTinyAiString('insertatcaret_tooltip')\n                }\n            ],\n    };\n};\n\nexport const getInputContext = () => {\n    return {\n        input: [\n            {\n                iconname: 'sparkle',\n                customicon: true,\n                button: [\n                    {\n                        customicon: false,\n                        iconname: 'arrow-right',\n                        iconstyle: 'solid',\n                        iconLeft: false,\n                        iconRight: true,\n                        tooltip: getTinyAiString('freepromptbutton_tooltip')\n                    }\n                ]\n            }\n        ],\n    };\n};\n\nexport const getShowPromptButtonContext = () => {\n    return {\n        hasText: true,\n        buttonText: getTinyAiString('showprompt'),\n        iconLeft: true,\n        iconRight: false,\n        tertiary: true,\n        iconname: 'eye',\n        iconstyle: 'solid',\n        action: 'showprompt',\n        textareatype: 'prompt',\n        collapsed: true,\n        tooltip: getTinyAiString('showpromptbutton_tooltip')\n    };\n};\n"],"names":["stringKeys","strings","Map","async","stringRequest","map","key","component","fetchedStrings","i","length","set","getTinyAiString","string","get","footerButtons","hasText","buttonText","iconLeft","iconRight","primary","secondary","tertiary","iconname","iconstyle","action","tooltip","customicon","mode","footerIconButtons","constants","modalModes","selection","input","button","textareatype","collapsed"],"mappings":";;;;;;;;;MA4BMA,WAAa,CACf,eACA,eACA,oBACA,uBACA,OACA,qBACA,SACA,uBACA,yBACA,uBACA,sBACA,oBACA,UACA,oBACA,eACA,+BACA,gCACA,sBACA,yBACA,2BACA,SACA,eACA,WACA,yBACA,aACA,kBACA,yBACA,uBACA,0BACA,kBACA,qBACA,gBACA,wBACA,cACA,sBACA,mBACA,eACA,sBACA,wBACA,eACA,sBACA,iBACA,2BACA,mBACA,iCACA,eACA,iBACA,OACA,aACA,2BACA,uBACA,qBACA,iBACA,oBACA,YACA,oBACA,oBACA,uBACA,8BACA,kBACA,uBACA,qBACA,+BACA,qBACA,+BACA,eACA,yBACA,uBACA,qBACA,eACA,aAGAC,QAAU,IAAIC,kBAEEC,wCACA,UAAWH,kBACrBI,cAAgBJ,WAAWK,KAAIC,MAC1B,CAACA,IAAAA,IAAKC,UAAW,cAKtBC,qBAAuB,mBAAWJ,mBACnC,IAAIK,EAAI,EAAGA,EAAIT,WAAWU,OAAQD,IACnCR,QAAQU,IAAIX,WAAWS,GAAID,eAAeC,WAIrCG,gBAAmBC,QACrBZ,QAAQa,IAAID,0FAGwB,KACpC,CACHE,cAAe,CACX,CACIC,SAAS,EACTC,WAAYL,gBAAgB,QAC5BM,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,SAAU,aACVC,UAAW,QACXC,OAAQ,OACRC,QAASd,gBAAgB,uBAE7B,CACII,SAAS,EACTC,WAAYL,gBAAgB,YAC5BM,UAAU,EACVC,WAAW,EACXC,SAAS,EACTC,WAAW,EACXC,UAAU,EACVC,SAAU,UACVI,YAAY,EACZF,OAAQ,WACRC,QAASd,gBAAgB,gEAMAgB,OAE9B,CACHC,kBACI,CACI,CACIJ,OAAQ,SACRF,SAAU,QACVG,QAASd,gBAAgB,yBAE7B,CACIa,OAAQ,aACRF,SAAU,gBACVG,QAASd,gBAAgB,8BAGrCG,cACI,CACI,CACIU,OAAQ,cACRT,SAAS,EACTC,WAAYL,gBAAgB,eAC5BM,UAAU,EACVC,WAAW,EACXE,WAAW,EACXE,SAAU,mBACVI,YAAY,EACZD,QAASd,gBAAgB,wBAE7B,CACIa,OAAQG,OAASE,qBAAUC,WAAWC,UAAY,UAAY,gBAC9DhB,SAAS,EACTC,WAAYW,OAASE,qBAAUC,WAAWC,UACpCpB,gBAAgB,oBAAsBA,gBAAgB,iBAC5DM,UAAU,EACVC,WAAW,EACXC,SAAS,EACTG,SAAU,QACVC,UAAW,QACXE,QAASE,OAASE,qBAAUC,WAAWC,UACjCpB,gBAAgB,4BAA8BA,gBAAgB,sDAMzD,KACpB,CACHqB,MAAO,CACH,CACIV,SAAU,UACVI,YAAY,EACZO,OAAQ,CACJ,CACIP,YAAY,EACZJ,SAAU,cACVC,UAAW,QACXN,UAAU,EACVC,WAAW,EACXO,QAASd,gBAAgB,sEAQP,KAC/B,CACHI,SAAS,EACTC,WAAYL,gBAAgB,cAC5BM,UAAU,EACVC,WAAW,EACXG,UAAU,EACVC,SAAU,MACVC,UAAW,QACXC,OAAQ,aACRU,aAAc,SACdC,WAAW,EACXV,QAASd,gBAAgB"}