{"version":3,"file":"translate.min.js","sources":["../../src/datahandler/translate.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport * as BasedataHandler from 'tiny_ai/datahandler/basedata';\nimport BaseHandler from 'tiny_ai/datahandler/base';\nimport {getTranslateHandler} from 'tiny_ai/utils';\nimport Config from 'core/config';\nimport {getString} from 'core/str';\n\n/**\n * Tiny AI data manager.\n *\n * @module      tiny_ai/datahandler/translate\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nexport default class extends BaseHandler {\n\n    languageNameInCurrentUserLanguage = new Intl.DisplayNames([Config.language], {type: 'language'});\n    // English will always be added to the front of the list. All other languages can be defined here.\n    // The user's current language will be shown right after English, if it is contained in this list.\n    targetLanguageCodes = [\n        'de', 'fr', 'it', 'es', 'cs', 'zh', 'ru', 'uk', 'el', 'la', 'tr', 'ro', 'pl', 'bg', 'ar', 'sq',\n        'bs', 'sr', 'hr', 'ku', 'fa', 'ps', 'sk', 'hu'\n    ];\n    targetLanguageOptions = [];\n    targetLanguage = null;\n\n    constructor(uniqid) {\n        super(uniqid);\n        this.initTargetLanguages();\n    }\n\n    setTargetLanguage(targetLanguage) {\n        this.targetLanguage = targetLanguage;\n    }\n\n    async getPrompt(selectionText) {\n        const selectedLanguageEntry =\n            this.targetLanguageOptions.filter(languageEntry => languageEntry.key === this.targetLanguage)[0];\n        let prompt = await getString('translate_baseprompt', 'tiny_ai', selectedLanguageEntry.value);\n        prompt += ': ' + selectionText;\n        return prompt;\n    }\n\n    getTemplateContext() {\n        const translateHandler = getTranslateHandler(this.uniqid);\n        const context = {\n            modal_headline: BasedataHandler.getTinyAiString('translate_headline'),\n            showIcon: true,\n            tool: 'translate',\n        };\n        const targetLanguageDropdownContext = {};\n        targetLanguageDropdownContext.preference = 'targetLanguage';\n        targetLanguageDropdownContext.dropdown_default = translateHandler.targetLanguageOptions[0].value;\n        targetLanguageDropdownContext.dropdown_default_value = translateHandler.targetLanguageOptions[0].key;\n        targetLanguageDropdownContext.dropdown_description = BasedataHandler.getTinyAiString('targetlanguage');\n        const targetLanguageDropdownOptions = [];\n        translateHandler.targetLanguageOptions.forEach(languageEntry => {\n            targetLanguageDropdownOptions.push({\n                optionValue: languageEntry.key,\n                optionLabel: languageEntry.value,\n            });\n        });\n        targetLanguageDropdownContext.dropdown_options = targetLanguageDropdownOptions;\n\n        Object.assign(context, {\n            modal_dropdowns: [\n                targetLanguageDropdownContext,\n            ]\n        });\n        Object.assign(context, BasedataHandler.getShowPromptButtonContext());\n        Object.assign(context, BasedataHandler.getBackAndGenerateButtonContext());\n        return context;\n    }\n\n    initTargetLanguages() {\n        const firstLanguages = [\n            {\n                key: 'en',\n                value: this.languageNameInCurrentUserLanguage.of('en')\n            }\n        ];\n        if (Config.language !== 'en' && this.targetLanguageCodes.includes(Config.language)) {\n            firstLanguages.push(\n                {\n                    key: Config.language,\n                    value: this.languageNameInCurrentUserLanguage.of(Config.language)\n                }\n            );\n            // Remove current user's language from the list.\n            const index = this.targetLanguageCodes.indexOf(Config.language);\n            this.targetLanguageCodes.splice(index, 1);\n        }\n        this.targetLanguageCodes.forEach(languageCode => {\n            this.targetLanguageOptions[languageCode] = this.languageNameInCurrentUserLanguage.of(languageCode);\n        });\n\n        const sortedLanguages = Object\n            .entries(this.targetLanguageOptions)\n            .sort((a, b) => a[1].localeCompare(b[1]))\n            .map(([key, value]) => ({'key': key, 'value': value}));\n        this.targetLanguageOptions = [...firstLanguages, ...sortedLanguages];\n    }\n}\n"],"names":["BaseHandler","constructor","uniqid","Intl","DisplayNames","Config","language","type","initTargetLanguages","setTargetLanguage","targetLanguage","selectionText","selectedLanguageEntry","this","targetLanguageOptions","filter","languageEntry","key","prompt","value","getTemplateContext","translateHandler","context","modal_headline","BasedataHandler","getTinyAiString","showIcon","tool","targetLanguageDropdownContext","dropdown_default","dropdown_default_value","dropdown_description","targetLanguageDropdownOptions","forEach","push","optionValue","optionLabel","dropdown_options","Object","assign","modal_dropdowns","getShowPromptButtonContext","getBackAndGenerateButtonContext","firstLanguages","languageNameInCurrentUserLanguage","of","targetLanguageCodes","includes","index","indexOf","splice","languageCode","sortedLanguages","entries","sort","a","b","localeCompare","map","_ref"],"mappings":";;;;;;;;s2BA8B6BA,cAYzBC,YAAYC,cACFA,iEAX0B,IAAIC,KAAKC,aAAa,CAACC,gBAAOC,UAAW,CAACC,KAAM,yDAG9D,CAClB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1F,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,oDAEtB,0CACP,WAIRC,sBAGTC,kBAAkBC,qBACTA,eAAiBA,+BAGVC,qBACNC,sBACFC,KAAKC,sBAAsBC,QAAOC,eAAiBA,cAAcC,MAAQJ,KAAKH,iBAAgB,OAC9FQ,aAAe,kBAAU,uBAAwB,UAAWN,sBAAsBO,cACtFD,QAAU,KAAOP,cACVO,OAGXE,2BACUC,kBAAmB,8BAAoBR,KAAKX,QAC5CoB,QAAU,CACZC,eAAgBC,gBAAgBC,gBAAgB,sBAChDC,UAAU,EACVC,KAAM,aAEJC,8BAAgC,CACtCA,WAA2C,kBAC3CA,8BAA8BC,iBAAmBR,iBAAiBP,sBAAsB,GAAGK,MAC3FS,8BAA8BE,uBAAyBT,iBAAiBP,sBAAsB,GAAGG,IACjGW,8BAA8BG,qBAAuBP,gBAAgBC,gBAAgB,wBAC/EO,8BAAgC,UACtCX,iBAAiBP,sBAAsBmB,SAAQjB,gBAC3CgB,8BAA8BE,KAAK,CAC/BC,YAAanB,cAAcC,IAC3BmB,YAAapB,cAAcG,WAGnCS,8BAA8BS,iBAAmBL,8BAEjDM,OAAOC,OAAOjB,QAAS,CACnBkB,gBAAiB,CACbZ,iCAGRU,OAAOC,OAAOjB,QAASE,gBAAgBiB,8BACvCH,OAAOC,OAAOjB,QAASE,gBAAgBkB,mCAChCpB,QAGXd,4BACUmC,eAAiB,CACnB,CACI1B,IAAK,KACLE,MAAON,KAAK+B,kCAAkCC,GAAG,WAGjC,OAApBxC,gBAAOC,UAAqBO,KAAKiC,oBAAoBC,SAAS1C,gBAAOC,UAAW,CAChFqC,eAAeT,KACX,CACIjB,IAAKZ,gBAAOC,SACZa,MAAON,KAAK+B,kCAAkCC,GAAGxC,gBAAOC,kBAI1D0C,MAAQnC,KAAKiC,oBAAoBG,QAAQ5C,gBAAOC,eACjDwC,oBAAoBI,OAAOF,MAAO,QAEtCF,oBAAoBb,SAAQkB,oBACxBrC,sBAAsBqC,cAAgBtC,KAAK+B,kCAAkCC,GAAGM,uBAGnFC,gBAAkBd,OACnBe,QAAQxC,KAAKC,uBACbwC,MAAK,CAACC,EAAGC,IAAMD,EAAE,GAAGE,cAAcD,EAAE,MACpCE,KAAIC,WAAE1C,IAAKE,kBAAY,KAAQF,UAAcE,eAC7CL,sBAAwB,IAAI6B,kBAAmBS"}