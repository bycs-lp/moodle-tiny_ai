{"version":3,"file":"translate.min.js","sources":["../../src/datahandler/translate.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport * as BasedataHandler from 'tiny_ai/datahandler/basedata';\nimport Config from 'core/config';\nimport {getString} from 'core/str';\n\n/**\n * Tiny AI data manager.\n *\n * @module      tiny_ai/datahandler/translate\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst TranslateHandler = new _TranslateHandler();\n\nclass _TranslateHandler {\n\n    languageNameInCurrentUserLanguage = new Intl.DisplayNames([Config.language], {type: 'language'});\n\n    targetLanguageOptions = {\n        en: this.languageNameInCurrentUserLanguage.of('en'),\n        de: this.languageNameInCurrentUserLanguage.of('de'),\n        it: this.languageNameInCurrentUserLanguage.of('it'),\n        es: this.languageNameInCurrentUserLanguage.of('es'),\n        ru: this.languageNameInCurrentUserLanguage.of('ru'),\n        uk: this.languageNameInCurrentUserLanguage.of('uk'),\n        zh: this.languageNameInCurrentUserLanguage.of('zh'),\n    };\n    targetLanguage = null;\n\n\n    setTargetLanguage(targetLanguage) {\n        this.targetLanguage = targetLanguage;\n    }\n\n    async getPrompt(selectionText) {\n        let prompt = await getString('translate_baseprompt', 'tiny_ai', this.targetLanguageOptions[this.targetLanguage]);\n        prompt += ': ' + selectionText;\n        return prompt;\n    }\n\n    getTemplateContext() {\n        const context = {\n            modal_headline: BasedataHandler.getTinyAiString('translate_headline'),\n            showIcon: true,\n            tool: 'translate',\n        };\n        const targetLanguageDropdownContext = {};\n        targetLanguageDropdownContext.preference = 'targetLanguage';\n        targetLanguageDropdownContext.dropdown_default = Object.values(TranslateHandler.targetLanguageOptions)[0];\n        targetLanguageDropdownContext.dropdown_default_value = Object.keys(TranslateHandler.targetLanguageOptions)[0];\n        targetLanguageDropdownContext.dropdown_description = BasedataHandler.getTinyAiString('targetlanguage');\n        const targetLanguageDropdownOptions = [];\n        for (const [key, value] of Object.entries(TranslateHandler.targetLanguageOptions)) {\n            targetLanguageDropdownOptions.push({\n                optionValue: key,\n                optionLabel: value,\n            });\n        }\n        targetLanguageDropdownContext.dropdown_options = targetLanguageDropdownOptions;\n\n        Object.assign(context, {\n            modal_dropdowns: [\n                targetLanguageDropdownContext,\n            ]\n        });\n        Object.assign(context, BasedataHandler.getShowPromptButtonContext());\n        Object.assign(context, BasedataHandler.getBackAndGenerateButtonContext());\n        return context;\n    }\n}\n\nexport default TranslateHandler;\n"],"names":["TranslateHandler","Intl","DisplayNames","Config","language","type","en","this","languageNameInCurrentUserLanguage","of","de","it","es","ru","uk","zh","setTargetLanguage","targetLanguage","selectionText","prompt","targetLanguageOptions","getTemplateContext","context","modal_headline","BasedataHandler","getTinyAiString","showIcon","tool","targetLanguageDropdownContext","dropdown_default","Object","values","dropdown_default_value","keys","dropdown_description","targetLanguageDropdownOptions","key","value","entries","push","optionValue","optionLabel","dropdown_options","assign","modal_dropdowns","getShowPromptButtonContext","getBackAndGenerateButtonContext"],"mappings":";;;;;;;;i0BA4BMA,iBAAmB,iFAIe,IAAIC,KAAKC,aAAa,CAACC,gBAAOC,UAAW,CAACC,KAAM,2DAE5D,CACpBC,GAAIC,KAAKC,kCAAkCC,GAAG,MAC9CC,GAAIH,KAAKC,kCAAkCC,GAAG,MAC9CE,GAAIJ,KAAKC,kCAAkCC,GAAG,MAC9CG,GAAIL,KAAKC,kCAAkCC,GAAG,MAC9CI,GAAIN,KAAKC,kCAAkCC,GAAG,MAC9CK,GAAIP,KAAKC,kCAAkCC,GAAG,MAC9CM,GAAIR,KAAKC,kCAAkCC,GAAG,8CAEjC,MAGjBO,kBAAkBC,qBACTA,eAAiBA,+BAGVC,mBACRC,aAAe,kBAAU,uBAAwB,UAAWZ,KAAKa,sBAAsBb,KAAKU,wBAChGE,QAAU,KAAOD,cACVC,OAGXE,2BACUC,QAAU,CACZC,eAAgBC,gBAAgBC,gBAAgB,sBAChDC,UAAU,EACVC,KAAM,aAEJC,8BAAgC,CACtCA,WAA2C,kBAC3CA,8BAA8BC,iBAAmBC,OAAOC,OAAO/B,iBAAiBoB,uBAAuB,GACvGQ,8BAA8BI,uBAAyBF,OAAOG,KAAKjC,iBAAiBoB,uBAAuB,GAC3GQ,8BAA8BM,qBAAuBV,gBAAgBC,gBAAgB,wBAC/EU,8BAAgC,OACjC,MAAOC,IAAKC,SAAUP,OAAOQ,QAAQtC,iBAAiBoB,uBACvDe,8BAA8BI,KAAK,CAC/BC,YAAaJ,IACbK,YAAaJ,eAGrBT,8BAA8Bc,iBAAmBP,8BAEjDL,OAAOa,OAAOrB,QAAS,CACnBsB,gBAAiB,CACbhB,iCAGRE,OAAOa,OAAOrB,QAASE,gBAAgBqB,8BACvCf,OAAOa,OAAOrB,QAASE,gBAAgBsB,mCAChCxB,uBAIAtB"}