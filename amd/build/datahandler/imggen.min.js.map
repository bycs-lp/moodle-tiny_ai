{"version":3,"file":"imggen.min.js","sources":["../../src/datahandler/imggen.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport DataManager from 'tiny_ai/datamanager';\nimport {exception as displayException} from 'core/notification';\nimport {getString} from 'core/str';\nimport * as AiConfig from 'local_ai_manager/config';\nimport * as BasedataHandler from \"./basedata\";\n\n/**\n * Tiny AI data manager.\n *\n * @module      tiny_ai/datahandler/imggen\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst ImggenHandler = new _ImggenHandler();\n\nclass _ImggenHandler {\n\n    imggenOptions = null;\n\n    size = null;\n\n    async getSizesOptions(){\n        await this.loadImggenOptions();\n        return this.imggenOptions.sizes;\n    }\n\n    setSize = (size) => {\n        this.size = size;\n    }\n\n    getOptions() {\n        if (this.size === null) {\n            return {};\n        }\n        const options = {};\n        if (this.size) {\n            options['sizes'] = [this.size];\n        }\n        return options;\n    }\n\n    async loadImggenOptions() {\n        if (this.imggenOptions === null) {\n            const fetchedOptions = await AiConfig.getPurposeOptions('imggen');\n            this.imggenOptions = JSON.parse(fetchedOptions.options);\n        }\n    }\n\n    getTemplateContext = async () => {\n        const context = {\n            modal_headline: BasedataHandler.getTinyAiString('imggen_headline'),\n            showIcon: true,\n            tool: 'imggen',\n            textareatype: 'prompt',\n            placeholder: BasedataHandler.getTinyAiString('imggen_placeholder'),\n        };\n\n        const modalDropdowns = [];\n\n        const sizesOptions = await ImggenHandler.getSizesOptions();\n        console.log(sizesOptions)\n        if (sizesOptions !== null && Object.keys(sizesOptions).length > 0) {\n            const sizesDropdownContext = {};\n            sizesDropdownContext.preference = 'sizes';\n            sizesDropdownContext.dropdown_default = sizesOptions[0]['displayname'];\n            sizesDropdownContext.dropdown_default_value = sizesOptions[0]['key'];\n            sizesDropdownContext.dropdown_description = BasedataHandler.getTinyAiString('size');\n            const sizesDropdownOptions = [];\n            console.log(sizesOptions)\n            sizesOptions.forEach(option => {\n                sizesDropdownOptions.push({\n                    optionValue: option.key,\n                    optionLabel: option.displayname,\n                });\n            });\n            sizesDropdownContext.dropdown_options = sizesDropdownOptions;\n            modalDropdowns.push(sizesDropdownContext);\n        }\n\n        Object.assign(context, {\n            modal_dropdowns: modalDropdowns\n        });\n        Object.assign(context, BasedataHandler.getBackAndGenerateButtonContext())\n        return context;\n    }\n}\n\nexport default ImggenHandler;\n\n\n\n"],"names":["ImggenHandler","size","async","context","modal_headline","BasedataHandler","getTinyAiString","showIcon","tool","textareatype","placeholder","modalDropdowns","sizesOptions","getSizesOptions","console","log","Object","keys","length","sizesDropdownContext","dropdown_default","dropdown_default_value","dropdown_description","sizesDropdownOptions","forEach","option","push","optionValue","key","optionLabel","displayname","dropdown_options","assign","modal_dropdowns","getBackAndGenerateButtonContext","this","loadImggenOptions","imggenOptions","sizes","getOptions","options","fetchedOptions","AiConfig","getPurposeOptions","JSON","parse"],"mappings":";;;;;;;;iQA+BMA,cAAgB,6DAIF,kCAET,sCAOIC,YACFA,KAAOA,mDAqBKC,gBACXC,QAAU,CACZC,eAAgBC,gBAAgBC,gBAAgB,mBAChDC,UAAU,EACVC,KAAM,SACNC,aAAc,SACdC,YAAaL,gBAAgBC,gBAAgB,uBAG3CK,eAAiB,GAEjBC,mBAAqBZ,cAAca,qBACzCC,QAAQC,IAAIH,cACS,OAAjBA,cAAyBI,OAAOC,KAAKL,cAAcM,OAAS,EAAG,OACzDC,qBAAuB,CAC7BA,WAAkC,SAClCA,qBAAqBC,iBAAmBR,aAAa,GAAb,YACxCO,qBAAqBE,uBAAyBT,aAAa,GAAb,IAC9CO,qBAAqBG,qBAAuBjB,gBAAgBC,gBAAgB,cACtEiB,qBAAuB,GAC7BT,QAAQC,IAAIH,cACZA,aAAaY,SAAQC,SACjBF,qBAAqBG,KAAK,CACtBC,YAAaF,OAAOG,IACpBC,YAAaJ,OAAOK,iBAG5BX,qBAAqBY,iBAAmBR,qBACxCZ,eAAee,KAAKP,6BAGxBH,OAAOgB,OAAO7B,QAAS,CACnB8B,gBAAiBtB,iBAErBK,OAAOgB,OAAO7B,QAASE,gBAAgB6B,mCAChC/B,gDA7DDgC,KAAKC,oBACJD,KAAKE,cAAcC,MAO9BC,gBACsB,OAAdJ,KAAKlC,WACE,SAELuC,QAAU,UACZL,KAAKlC,OACLuC,QAAO,MAAY,CAACL,KAAKlC,OAEtBuC,qCAIoB,OAAvBL,KAAKE,cAAwB,OACvBI,qBAAuBC,SAASC,kBAAkB,eACnDN,cAAgBO,KAAKC,MAAMJ,eAAeD,yBA2C5CxC"}