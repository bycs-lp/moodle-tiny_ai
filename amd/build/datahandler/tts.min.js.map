{"version":3,"file":"tts.min.js","sources":["../../src/datahandler/tts.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport DataManager from 'tiny_ai/datamanager';\nimport * as AiConfig from 'local_ai_manager/config';\nimport * as BasedataHandler from 'tiny_ai/datahandler/basedata';\n\n/**\n * Tiny AI data manager.\n *\n * @module      tiny_ai/datahandler/tts\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst TtsHandler = new _TtsHandler();\n\nclass _TtsHandler {\n\n    ttsOptions = null;\n\n    targetLanguage = null;\n    voice = null;\n    gender = null;\n\n    async getTargetLanguageOptions(){\n        await this.loadTtsOptions();\n        console.log(this.ttsOptions.languages)\n        return this.ttsOptions.languages;\n    }\n\n    async getVoiceOptions() {\n        await this.loadTtsOptions();\n        console.log(this.ttsOptions.voices);\n        return this.ttsOptions.voices;\n    }\n\n    async getGenderOptions() {\n        await this.loadTtsOptions();\n        return this.ttsOptions.gender;\n    }\n\n    setTargetLanguage = (targetLanguage) => {\n        this.targetLanguage = targetLanguage;\n    }\n\n    setVoice = (voice) => {\n        this.voice = voice;\n    }\n\n    setGender = (gender) => {\n        this.gender = gender;\n    }\n\n    getOptions() {\n        if (this.targetLanguage === null && this.voice === null && this.gender === null) {\n            return {};\n        }\n        const options = {};\n        if (this.targetLanguage) {\n            options['languages'] = [this.targetLanguage];\n        }\n        if (this.voice) {\n            options['voices'] = [this.voice];\n        }\n        if (this.gender) {\n            options['gender'] = [this.gender];\n        }\n        return options;\n    }\n\n    getPrompt() {\n        // This handler handles both 'tts' and 'audiogen' tool types which basically are pretty much the same,\n        // but not exactly.\n        return DataManager.getCurrentTool() === 'tts' ? DataManager.getSelectionText() : '';\n    }\n\n    async loadTtsOptions() {\n        if (this.ttsOptions === null) {\n            const fetchedOptions = await AiConfig.getPurposeOptions('tts');\n            this.ttsOptions = JSON.parse(fetchedOptions.options);\n        }\n    }\n\n    /**\n     * Get the rendering context.\n     *\n     * @param {string} tool the tool to generate the context for, can be 'tts' and 'audiogen'\n     */\n    getTemplateContext = async (tool) => {\n        const context = {\n            modal_headline: BasedataHandler.getTinyAiString(tool + '_headline'),\n            showIcon: true,\n            tool: tool,\n        };\n\n        const modalDropdowns = [];\n\n        const targetLanguageOptions = await TtsHandler.getTargetLanguageOptions();\n        if (targetLanguageOptions !== null && Object.keys(targetLanguageOptions).length > 0) {\n            const targetLanguageDropdownContext = {};\n            targetLanguageDropdownContext.preference = 'targetLanguage';\n            targetLanguageDropdownContext.dropdown_default = targetLanguageOptions[0]['displayname'];\n            targetLanguageDropdownContext.dropdown_default_value = targetLanguageOptions[0]['key'];\n            targetLanguageDropdownContext.dropdown_description = BasedataHandler.getTinyAiString('targetlanguage');\n            const targetLanguageDropdownOptions = [];\n            targetLanguageOptions.forEach(option => {\n                targetLanguageDropdownOptions.push({\n                    optionValue: option.key,\n                    optionLabel: option.displayname,\n                });\n            });\n            targetLanguageDropdownContext.dropdown_options = targetLanguageDropdownOptions;\n            modalDropdowns.push(targetLanguageDropdownContext);\n        }\n\n        const voiceOptions = await TtsHandler.getVoiceOptions();\n        if (voiceOptions !== null && Object.keys(voiceOptions).length > 0) {\n            const voiceDropdownContext = {};\n            voiceDropdownContext.preference = 'voice';\n            voiceDropdownContext.dropdown_default = voiceOptions[0]['displayname'];\n            voiceDropdownContext.dropdown_default_value = voiceOptions[0]['key'];\n            console.log(Object.values(targetLanguageOptions))\n            console.log(Object.keys(targetLanguageOptions))\n            voiceDropdownContext.dropdown_description = BasedataHandler.getTinyAiString('voice');\n            const voiceDropdownOptions = [];\n            console.log(voiceOptions)\n            voiceOptions.forEach(option => {\n                voiceDropdownOptions.push({\n                    optionValue: option.key,\n                    optionLabel: option.displayname,\n                });\n            });\n            voiceDropdownContext.dropdown_options = voiceDropdownOptions;\n            modalDropdowns.push(voiceDropdownContext);\n        }\n\n        const genderOptions = await TtsHandler.getGenderOptions();\n        if (genderOptions !== null && Object.keys(genderOptions).length > 0) {\n            const genderDropdownContext = {};\n            genderDropdownContext.preference = 'gender';\n            genderDropdownContext.dropdown_default = genderOptions[0]['displayname'];\n            genderDropdownContext.dropdown_default_value = genderOptions[0]['key'];\n            genderDropdownContext.dropdown_description = BasedataHandler.getTinyAiString('gender');\n            const genderDropdownOptions = [];\n            console.log(genderOptions)\n            genderOptions.forEach(option => {\n                genderDropdownOptions.push({\n                    optionValue: option.key,\n                    optionLabel: option.displayname,\n                });\n            });\n            genderDropdownContext.dropdown_options = genderDropdownOptions;\n            modalDropdowns.push(genderDropdownContext);\n        }\n\n        Object.assign(context, {\n            modal_dropdowns: modalDropdowns\n        });\n\n        Object.assign(context, BasedataHandler.getShowPromptButtonContext());\n\n        if (tool === 'audiogen') {\n            // Overwrite some prompt textarea specific attributes.\n            context.collapsed = false;\n            context.placeholder = BasedataHandler.getTinyAiString('audiogen_placeholder');\n        }\n        Object.assign(context, BasedataHandler.getBackAndGenerateButtonContext());\n        return context;\n    }\n}\n\n\n\nexport default TtsHandler;\n\n\n\n"],"names":["TtsHandler","targetLanguage","voice","gender","async","context","modal_headline","BasedataHandler","getTinyAiString","tool","showIcon","modalDropdowns","targetLanguageOptions","getTargetLanguageOptions","Object","keys","length","targetLanguageDropdownContext","dropdown_default","dropdown_default_value","dropdown_description","targetLanguageDropdownOptions","forEach","option","push","optionValue","key","optionLabel","displayname","dropdown_options","voiceOptions","getVoiceOptions","voiceDropdownContext","console","log","values","voiceDropdownOptions","genderOptions","getGenderOptions","genderDropdownContext","genderDropdownOptions","assign","modal_dropdowns","getShowPromptButtonContext","collapsed","placeholder","getBackAndGenerateButtonContext","this","loadTtsOptions","ttsOptions","languages","voices","getOptions","options","getPrompt","DataManager","getCurrentTool","getSelectionText","fetchedOptions","AiConfig","getPurposeOptions","JSON","parse"],"mappings":"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"}