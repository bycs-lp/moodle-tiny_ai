{"version":3,"file":"tts.min.js","sources":["../../src/datahandler/tts.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport * as AiConfig from 'local_ai_manager/config';\nimport * as BasedataHandler from 'tiny_ai/datahandler/basedata';\nimport Config from 'core/config';\n\n/**\n * Tiny AI data manager.\n *\n * @module      tiny_ai/datahandler/tts\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst TtsHandler = new _TtsHandler();\n\nclass _TtsHandler {\n\n    ttsOptions = null;\n\n    targetLanguage = null;\n    voice = null;\n    gender = null;\n\n    async getTargetLanguageOptions() {\n        await this.loadTtsOptions();\n        return this.ttsOptions.languages;\n    }\n\n    async getVoiceOptions() {\n        await this.loadTtsOptions();\n        return this.ttsOptions.voices;\n    }\n\n    async getGenderOptions() {\n        await this.loadTtsOptions();\n        return this.ttsOptions.gender;\n    }\n\n    setTargetLanguage(targetLanguage) {\n        this.targetLanguage = targetLanguage;\n    }\n\n    setVoice(voice) {\n        this.voice = voice;\n    }\n\n    setGender(gender) {\n        this.gender = gender;\n    }\n\n    getOptions() {\n        if (this.targetLanguage === null && this.voice === null && this.gender === null) {\n            return {};\n        }\n        const options = {};\n        if (this.targetLanguage) {\n            options['languages'] = [this.targetLanguage];\n        }\n        if (this.voice) {\n            options['voices'] = [this.voice];\n        }\n        if (this.gender) {\n            options['gender'] = [this.gender];\n        }\n        return options;\n    }\n\n    getPrompt(currentTool, selectionText) {\n        // This handler handles both 'tts' and 'audiogen' tool types which basically are pretty much the same,\n        // but not exactly.\n        return currentTool === 'tts' ? selectionText : '';\n    }\n\n    async loadTtsOptions() {\n        if (this.ttsOptions === null) {\n            const fetchedOptions = await AiConfig.getPurposeOptions('tts');\n            this.ttsOptions = JSON.parse(fetchedOptions.options);\n        }\n    }\n\n    /**\n     * Get the rendering context.\n     *\n     * @param {string} tool the tool to generate the context for, can be 'tts' and 'audiogen'\n     */\n    async getTemplateContext(tool) {\n        const context = {\n            modal_headline: BasedataHandler.getTinyAiString(tool + '_headline'),\n            showIcon: true,\n            tool: tool,\n        };\n\n        const modalDropdowns = [];\n\n        const targetLanguageOptions = await TtsHandler.getTargetLanguageOptions();\n        if (targetLanguageOptions !== null && Object.keys(targetLanguageOptions).length > 0) {\n            const targetLanguageDropdownContext = {};\n            targetLanguageDropdownContext.preference = 'targetLanguage';\n            let indexOfLanguageOption = 0;\n            const matchingEntry = targetLanguageOptions.map(entry => entry['key'].startsWith(Config.language));\n\n            if (matchingEntry.length > 0) {\n                // Language keys are of the form de-DE, so we check, if current user's language starts with same language code.\n                indexOfLanguageOption = targetLanguageOptions.findIndex(value => value['key'].startsWith(Config.language));\n            }\n            targetLanguageDropdownContext.dropdown_default = targetLanguageOptions[indexOfLanguageOption]['displayname'];\n            targetLanguageDropdownContext.dropdown_default_value = targetLanguageOptions[indexOfLanguageOption]['key'];\n            targetLanguageDropdownContext.dropdown_description = BasedataHandler.getTinyAiString('targetlanguage');\n            const targetLanguageDropdownOptions = [];\n            targetLanguageOptions.forEach(option => {\n                targetLanguageDropdownOptions.push({\n                    optionValue: option.key,\n                    optionLabel: option.displayname,\n                });\n            });\n            targetLanguageDropdownContext.dropdown_options = targetLanguageDropdownOptions;\n            modalDropdowns.push(targetLanguageDropdownContext);\n        }\n\n        const voiceOptions = await TtsHandler.getVoiceOptions();\n        if (voiceOptions !== null && Object.keys(voiceOptions).length > 0) {\n            const voiceDropdownContext = {};\n            voiceDropdownContext.preference = 'voice';\n            voiceDropdownContext.dropdown_default = voiceOptions[0]['displayname'];\n            voiceDropdownContext.dropdown_default_value = voiceOptions[0]['key'];\n            voiceDropdownContext.dropdown_description = BasedataHandler.getTinyAiString('voice');\n            const voiceDropdownOptions = [];\n            voiceOptions.forEach(option => {\n                voiceDropdownOptions.push({\n                    optionValue: option.key,\n                    optionLabel: option.displayname,\n                });\n            });\n            voiceDropdownContext.dropdown_options = voiceDropdownOptions;\n            modalDropdowns.push(voiceDropdownContext);\n        }\n\n        const genderOptions = await TtsHandler.getGenderOptions();\n        if (genderOptions !== null && Object.keys(genderOptions).length > 0) {\n            const genderDropdownContext = {};\n            genderDropdownContext.preference = 'gender';\n            genderDropdownContext.dropdown_default = genderOptions[0]['displayname'];\n            genderDropdownContext.dropdown_default_value = genderOptions[0]['key'];\n            genderDropdownContext.dropdown_description = BasedataHandler.getTinyAiString('gender');\n            const genderDropdownOptions = [];\n            genderOptions.forEach(option => {\n                genderDropdownOptions.push({\n                    optionValue: option.key,\n                    optionLabel: option.displayname,\n                });\n            });\n            genderDropdownContext.dropdown_options = genderDropdownOptions;\n            modalDropdowns.push(genderDropdownContext);\n        }\n        if (tool === 'audiogen') {\n            // In the audiogen view the dropdowns are at the bottom, so we need to make the dropdowns dropup instead of dropdown.\n            modalDropdowns.forEach(dropdownContext => {\n                dropdownContext.dropup = true;\n            });\n        }\n\n        Object.assign(context, {\n            modal_dropdowns: modalDropdowns\n        });\n\n        Object.assign(context, BasedataHandler.getShowPromptButtonContext());\n\n        if (tool === 'audiogen') {\n            // Overwrite some prompt textarea specific attributes.\n            context.collapsed = false;\n            context.placeholder = BasedataHandler.getTinyAiString('audiogen_placeholder');\n        }\n        Object.assign(context, BasedataHandler.getBackAndGenerateButtonContext());\n        return context;\n    }\n}\n\nexport default TtsHandler;\n"],"names":["TtsHandler","this","loadTtsOptions","ttsOptions","languages","voices","gender","setTargetLanguage","targetLanguage","setVoice","voice","setGender","getOptions","options","getPrompt","currentTool","selectionText","fetchedOptions","AiConfig","getPurposeOptions","JSON","parse","tool","context","modal_headline","BasedataHandler","getTinyAiString","showIcon","modalDropdowns","targetLanguageOptions","getTargetLanguageOptions","Object","keys","length","targetLanguageDropdownContext","indexOfLanguageOption","map","entry","startsWith","Config","language","findIndex","value","dropdown_default","dropdown_default_value","dropdown_description","targetLanguageDropdownOptions","forEach","option","push","optionValue","key","optionLabel","displayname","dropdown_options","voiceOptions","getVoiceOptions","voiceDropdownContext","voiceDropdownOptions","genderOptions","getGenderOptions","genderDropdownContext","genderDropdownOptions","dropdownContext","dropup","assign","modal_dropdowns","getShowPromptButtonContext","collapsed","placeholder","getBackAndGenerateButtonContext"],"mappings":"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"}