{"version":3,"file":"tts.min.js","sources":["../../src/datahandler/tts.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport DataManager from 'tiny_ai/datamanager';\nimport {exception as displayException} from 'core/notification';\nimport {getString} from 'core/str';\nimport * as AiConfig from 'local_ai_manager/config';\n\n/**\n * Tiny AI data manager.\n *\n * @module      tiny_ai/datahandler/tts\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nconst TtsHandler = new _TtsHandler();\n\nclass _TtsHandler {\n\n    ttsOptions = null;\n\n    targetLanguage = null;\n    voice = null;\n    gender = null;\n\n    async getTargetLanguageOptions(){\n        await this.loadTtsOptions();\n        console.log(this.ttsOptions.languages)\n        return this.ttsOptions.languages;\n    }\n\n    async getVoiceOptions() {\n        await this.loadTtsOptions();\n        console.log(this.ttsOptions.voices);\n        return this.ttsOptions.voices;\n    }\n\n    async getGenderOptions() {\n        await this.loadTtsOptions();\n        return this.ttsOptions.gender;\n    }\n\n    setTargetLanguage = (targetLanguage) => {\n        this.targetLanguage = targetLanguage;\n    }\n\n    setVoice = (voice) => {\n        this.voice = voice;\n    }\n\n    setGender = (gender) => {\n        this.gender = gender;\n    }\n\n    getOptions() {\n        if (this.targetLanguage === null && this.voice === null && this.gender === null) {\n            return {};\n        }\n        const options = {};\n        if (this.targetLanguage) {\n            options['languages'] = [this.targetLanguage];\n        }\n        if (this.voice) {\n            options['voices'] = [this.voice];\n        }\n        if (this.gender) {\n            options['gender'] = [this.gender];\n        }\n        return options;\n    }\n\n    getPrompt() {\n        // This handler handles both 'tts' and 'audiogen' tool types which basically are pretty much the same,\n        // but not exactly.\n        return DataManager.getCurrentTool() === 'tts' ? DataManager.getSelectionText() : '';\n    }\n\n    async loadTtsOptions() {\n        if (this.ttsOptions === null) {\n            const fetchedOptions = await AiConfig.getPurposeOptions('tts');\n            this.ttsOptions = JSON.parse(fetchedOptions.options);\n        }\n    }\n}\n\n\n\nexport default TtsHandler;\n\n\n\n"],"names":["TtsHandler","targetLanguage","voice","gender","this","loadTtsOptions","console","log","ttsOptions","languages","voices","getOptions","options","getPrompt","DataManager","getCurrentTool","getSelectionText","fetchedOptions","AiConfig","getPurposeOptions","JSON","parse"],"mappings":";;;;;;;;6zBA8BMA,WAAa,0DAIF,4CAEI,mCACT,oCACC,gDAmBYC,sBACZA,eAAiBA,mDAGdC,aACHA,MAAQA,2CAGJC,cACJA,OAASA,wDAzBRC,KAAKC,iBACXC,QAAQC,IAAIH,KAAKI,WAAWC,WACrBL,KAAKI,WAAWC,+CAIjBL,KAAKC,iBACXC,QAAQC,IAAIH,KAAKI,WAAWE,QACrBN,KAAKI,WAAWE,6CAIjBN,KAAKC,iBACJD,KAAKI,WAAWL,OAe3BQ,gBACgC,OAAxBP,KAAKH,gBAA0C,OAAfG,KAAKF,OAAkC,OAAhBE,KAAKD,aACrD,SAELS,QAAU,UACZR,KAAKH,iBACLW,QAAO,UAAgB,CAACR,KAAKH,iBAE7BG,KAAKF,QACLU,QAAO,OAAa,CAACR,KAAKF,QAE1BE,KAAKD,SACLS,QAAO,OAAa,CAACR,KAAKD,SAEvBS,QAGXC,kBAG4C,QAAjCC,qBAAYC,iBAA6BD,qBAAYE,mBAAqB,6BAIzD,OAApBZ,KAAKI,WAAqB,OACpBS,qBAAuBC,SAASC,kBAAkB,YACnDX,WAAaY,KAAKC,MAAMJ,eAAeL,yBAOzCZ"}