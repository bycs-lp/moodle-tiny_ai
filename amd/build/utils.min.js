define("tiny_ai/utils",["exports","tiny_ai/modal","core/modal_events","tiny_ai/options","tiny_ai/constants","tiny_ai/common","tiny_ai/renderer","tiny_ai/datamanager","core/notification","core/str","local_ai_manager/make_request","editor_tiny/options"],(function(_exports,_modal,_modal_events,_options,_constants,_common,Renderer,_datamanager,_notification,_str,_make_request,_options2){function _getRequireWildcardCache(nodeInterop){if("function"!=typeof WeakMap)return null;var cacheBabelInterop=new WeakMap,cacheNodeInterop=new WeakMap;return(_getRequireWildcardCache=function(nodeInterop){return nodeInterop?cacheNodeInterop:cacheBabelInterop})(nodeInterop)}function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Tiny AI utils library.
   *
   * @module      tiny_ai/utils
   * @copyright   2024, ISB Bayern
   * @author      Dr. Peter Mayer
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.replaceSelection=_exports.insertAfterContent=_exports.init=_exports.getMode=_exports.getDraftItemId=_exports.getContextId=_exports.getAiAnswer=_exports.displayDialogue=_exports.destroyModal=void 0,_modal=_interopRequireDefault(_modal),_modal_events=_interopRequireDefault(_modal_events),Renderer=function(obj,nodeInterop){if(!nodeInterop&&obj&&obj.__esModule)return obj;if(null===obj||"object"!=typeof obj&&"function"!=typeof obj)return{default:obj};var cache=_getRequireWildcardCache(nodeInterop);if(cache&&cache.has(obj))return cache.get(obj);var newObj={},hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj)if("default"!==key&&Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;desc&&(desc.get||desc.set)?Object.defineProperty(newObj,key,desc):newObj[key]=obj[key]}newObj.default=obj,cache&&cache.set(obj,newObj);return newObj}(Renderer),_datamanager=_interopRequireDefault(_datamanager);let userId=null,modal=null,mode=null,editor=null;_exports.init=async editorObject=>{editor=editorObject,userId=(0,_options.getUserId)(editor)};_exports.displayDialogue=async source=>{source===_common.selectionbarSource?mode=_constants.constants.modalModes.selection:source!==_common.toolbarSource&&source!==_common.menubarSource||(mode=_constants.constants.modalModes.general),modal=await _modal.default.create({templateContext:{classes:"tiny_ai-modal--dialog",headerclasses:"tiny_ai-modal--header"}}),mode===_constants.constants.modalModes.selection&&(console.log(editor),_datamanager.default.setSelection(editor.selection.getContent())),await Renderer.init(modal,userId),await Renderer.renderStart(mode),modal.getRoot().on(_modal_events.default.outsideClick,(event=>{event.preventDefault()}))};_exports.getAiAnswer=async function(prompt,purpose){let options=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},result=null;try{result=await(0,_make_request.makeRequest)(purpose,prompt,options)}catch(exception){(0,_notification.exception)(exception)}if(200!==result.code){const errorString=await(0,_str.getString)("errorwithcode","tiny_ai",result.code);return await(0,_notification.alert)(errorString,result.result),null}return result.result};_exports.insertAfterContent=textToInsert=>{editor.setContent(editor.getContent()+"<p>"+textToInsert+"</p>")};_exports.replaceSelection=textToReplace=>{editor.selection.setContent(textToReplace)};_exports.destroyModal=()=>{modal.destroy()};_exports.getDraftItemId=()=>(0,_options2.getDraftItemId)(editor);_exports.getContextId=()=>(0,_options2.getContextId)(editor);_exports.getMode=()=>mode}));

//# sourceMappingURL=utils.min.js.map