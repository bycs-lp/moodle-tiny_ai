{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @module      tiny_ai/utils\n * @copyright   2024, ISB Bayern\n * @author      Dr. Peter Mayer\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import Modal from 'core/modal';\nimport AiModal from './modal';\nimport Selectors from './selectors';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport {getPurposeConfig} from 'local_ai_manager/config';\nimport ModalEvents from 'core/modal_events';\nimport {getDraftItemId} from 'editor_tiny/options';\nimport {getString} from 'core/str';\nimport {alert, exception as displayException} from 'core/notification';\n\n/**\n * Define the purposes for the actions available in tiny_ai.\n *\n * @type {{imggen: string, freeprompt: string, tts: string, simplify: string, translate: string}}\n */\nconst purposes = {\n    simplify: 'singleprompt',\n    translate: 'singleprompt',\n    imggen: 'imggen',\n    tts: 'tts',\n    freeprompt: 'singleprompt',\n};\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = async(data) => {\n    const purposeConfig = await getPurposeConfig();\n    Object.keys(purposes).forEach(action => {\n        const templatekey = 'show' + action;\n        data[templatekey] = purposeConfig[purposes[action]] !== null;\n    });\n    // We remove all purposes which we are not using in tiny_ai.\n    const filteredPurposeConfigArray = Object.keys(purposes).filter(action => purposeConfig[purposes[action]] !== null);\n    // If there are no purposes left the tenant has not configured any purpose we need. We show a message in this case.\n    data.noactionsavailable = filteredPurposeConfigArray.length === 0;\n\n    return Object.assign({\n        'btnIdStartSimplification': Selectors.buttons.btnStartSimplification,\n\n        'defaultprompt-translate': \"\",\n        'btnIdStartTranslation': Selectors.buttons.btnStartTranslation,\n\n        'defaultprompt-tts': \"\",\n        'btnIdStartTTS': Selectors.buttons.btnStartTTS,\n\n        'defaultprompt-imggen': \"Generiere bitte ein Bild mit folgenden Eigenschaften: ...\",\n        'btnIdStartImgGen': Selectors.buttons.btnStartImgGen,\n        'btnOpenSettingsImgGen': Selectors.buttons.btnOpenSettingsImgGen,\n\n        'btnIdStartFree': Selectors.buttons.btnStartFree,\n\n        taResult: Selectors.elements.taResult,\n\n        spanResult: Selectors.elements.spanResult,\n    }, data);\n};\n\n/**\n * Shows and handles the dialog.\n *\n * @param {*} editor\n * @param {*} data\n */\nexport const displayDialogue = async (editor, data = {}) => {\n    const modal = await AiModal.create({\n        templateContext: await getTemplateContext(data)\n    });\n\n    const $root = modal.getRoot();\n\n    $root.on(ModalEvents.save, () => {\n        const selectedText = editor.selection.getContent();\n        const newText = document.getElementById(Selectors.elements.taResult).value;\n        if (selectedText) {\n            editor.selection.setContent(newText);\n        } else {\n            editor.insertContent(newText);\n        }\n    });\n\n    const simplifyButton = document.getElementById(Selectors.buttons.btnStartSimplification);\n    if (simplifyButton) {\n        simplifyButton.addEventListener('click', () => {\n            const selectedText = stripHtmlTags(editor.selection.getContent());\n            let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptSimplify).value;\n            const options = {};\n            options.confirmationpersonaldata = document.getElementById(Selectors.confirmation.simplification).checked;\n            getSinglePromptResult(cmdPrompt, selectedText, options);\n        });\n    }\n\n    const translateButton = document.getElementById(Selectors.buttons.btnStartTranslation);\n    if (translateButton) {\n        translateButton.addEventListener('click', () => {\n            const selectedText = stripHtmlTags(editor.selection.getContent());\n            let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptTranslate).value;\n            const options = {};\n            options.language = document.getElementById(Selectors.elements.translationOutputlanguage).value;\n            options.translation = true;\n            options.confirmationpersonaldata = document.getElementById(Selectors.confirmation.translation).checked;\n\n            let cmdPromptend;\n\n            if (options.translation) {\n                cmdPromptend = 'Translate the following text to ' + options.language;\n            }\n\n            if (cmdPrompt) {\n                cmdPromptend += \" \" + cmdPrompt;\n            }\n\n            getSinglePromptResult(cmdPromptend, selectedText, options);\n        });\n    }\n\n    const ttsButton = document.getElementById(Selectors.buttons.btnStartTTS);\n    if (ttsButton) {\n        ttsButton.addEventListener('click', () => {\n            const selectedText = stripHtmlTags(editor.selection.getContent());\n            let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptTTS).value;\n            const options = {};\n            options.itemid = getDraftItemId(editor);\n            options.filename = \"tts_\" + Math.random().toString(16).slice(2) + \".mp3\";\n            options.language = document.getElementById(Selectors.elements.ttsOutputlanguage).value;\n            options.voice = document.getElementById(Selectors.elements.ttsOutputVoice).value;\n            options.confirmationpersonaldata = document.getElementById(Selectors.confirmation.tts).checked;\n            getMP3(cmdPrompt, selectedText, options);\n        });\n    }\n\n    const imggenButton = document.getElementById(Selectors.buttons.btnStartImgGen);\n    if (imggenButton) {\n        imggenButton.addEventListener('click', () => {\n            const selectedText = stripHtmlTags(editor.selection.getContent());\n            let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptImgGen).value;\n            const options = {};\n            options.itemid = getDraftItemId(editor);\n            options.filename = \"imggen_\" + Math.random().toString(16).slice(2) + \".png\";\n            options.imagesize = document.getElementById(Selectors.elements.imggenwidth).value;\n            options.imagesize += \"x\" + document.getElementById(Selectors.elements.imggenheight).value;\n            options.confirmationpersonaldata = document.getElementById(Selectors.confirmation.imggen).checked;\n            getIMG(cmdPrompt, selectedText, options);\n        });\n    }\n\n    const freePromptButton = document.getElementById(Selectors.buttons.btnStartFree);\n    if (freePromptButton) {\n        freePromptButton.addEventListener('click', () => {\n            let prompt = document.getElementById(Selectors.elements.freerompt).value;\n            const options = {};\n            options.confirmationpersonaldata = document.getElementById(Selectors.confirmation.free).checked;\n            getSinglePromptResult(prompt, \"\", options);\n        });\n    }\n\n};\n\n/**\n * Get the Chat result.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getSinglePromptResult = async(cmdPrompt, selectedText, options) => {\n\n    const prompt = cmdPrompt + \": \" + selectedText;\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.previewWrapperId).classList.add(\"hidden\");\n\n    if (!options.confirmationpersonaldata) {\n        const StrPleaseWait = await getString('not_confirmed', 'tiny_ai');\n        document.getElementById(Selectors.elements.taResult).innerHTML = StrPleaseWait;\n        return;\n    }\n\n    const StrPleaseWait = await getString('results_please_wait', 'tiny_ai');\n    document.getElementById(Selectors.elements.taResult).value = StrPleaseWait;\n\n    const requestresult = await retrieveResult('singleprompt', prompt, options);\n\n    if (requestresult === null) {\n        document.getElementById(Selectors.elements.taResult).value = '';\n        return;\n    }\n\n    document.getElementById(Selectors.elements.taResult).value = requestresult.result;\n};\n\n/**\n * Get the MP3.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getMP3 = async(cmdPrompt, selectedText, options) => {\n    const prompt = cmdPrompt + \" \" + selectedText;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    // document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.spanResult).classList.add(\"hidden\");\n    document.getElementById(Selectors.elements.previewWrapperId).classList.remove(\"hidden\");\n\n    if (!options.confirmationpersonaldata) {\n        const StrPleaseWait = await getString('not_confirmed', 'tiny_ai');\n        document.getElementById(Selectors.elements.previewSectionId).innerHTML = StrPleaseWait;\n        return;\n    }\n\n    const StrPleaseWait = await getString('results_please_wait', 'tiny_ai');\n    document.getElementById(Selectors.elements.previewSectionId).innerHTML = StrPleaseWait;\n\n    const requestresult = await retrieveResult(purposes.tts, prompt, options);\n    if (requestresult === null) {\n        return;\n    }\n    const fileUrl = requestresult.result;\n\n    // Add the audio tag to the textarea, that is inserted later to the main editor.\n    const node = selectedText + '<audio class=\"tiny_ai_audio\" controls src=\"' + fileUrl + '\" type=\"audio/mpeg\"/>';\n    document.getElementById(Selectors.elements.taResult).value = node;\n\n    // Finally generate the preview audio tag.\n    const audiotag = document.createElement('audio');\n    audiotag.controls = 'controls';\n    audiotag.src = fileUrl;\n    audiotag.type = 'audio/mpeg';\n    document.getElementById(Selectors.elements.previewSectionId).innerHTML = \"\";\n    document.getElementById(Selectors.elements.previewSectionId).appendChild(audiotag);\n\n};\n\n/**\n * Get the IMG.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getIMG = async(cmdPrompt, selectedText, options) => {\n    const prompt = cmdPrompt;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    // document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.spanResult).classList.add('hidden');\n    document.getElementById(Selectors.elements.previewWrapperId).classList.remove('hidden');\n\n    if (!options.confirmationpersonaldata) {\n        const StrNotConfirmed = await getString('not_confirmed', 'tiny_ai');\n        document.getElementById(Selectors.elements.previewSectionId).innerHTML = StrNotConfirmed;\n        return;\n    }\n\n    const StrPleaseWait = await getString('results_please_wait', 'tiny_ai');\n    document.getElementById(Selectors.elements.previewSectionId).innerHTML = StrPleaseWait;\n\n    const requestresult = await retrieveResult(purposes.imggen, prompt, options);\n    if (retrieveResult === null) {\n        return;\n    }\n\n    const fileUrl = requestresult.result;\n\n    // Add the img tag to the textarea, that is inserted later to the main editor.\n    const node = selectedText + '<img class=\"tiny_ai_img\" src=\"' + fileUrl + '\" />';\n    document.getElementById(Selectors.elements.taResult).value = node;\n\n    // Finally generate the preview img tag.\n    const img = document.createElement('img');\n    img.src = fileUrl;\n    document.getElementById(Selectors.elements.previewSectionId).innerHTML = '';\n    document.getElementById(Selectors.elements.previewSectionId).appendChild(img);\n};\n\n/**\n * Get the async answer from the LLM.\n *\n * @param {string} purpose\n * @param {string} prompt\n * @param {array} options\n * @returns {string}\n */\nconst retrieveResult = async(purpose, prompt, options = []) => {\n    let result;\n    try {\n        result = await makeRequest(purpose, prompt, JSON.stringify(options));\n    } catch (error) {\n        displayException(error);\n    }\n    if (result.code !== 200) {\n        const errorString = await getString('errorwithcode', 'tiny_ai', result.code);\n        await alert(errorString, result.result);\n        return null;\n    }\n\n    return result;\n};\n\nconst stripHtmlTags = (html) => {\n    // Place selected content into a temporary span and extract the plain text from it to strip HTML tags.\n    const span = document.createElement('span');\n    span.innerHTML = html;\n    return span.textContent;\n};\n"],"names":["purposes","simplify","translate","imggen","tts","freeprompt","getTemplateContext","async","purposeConfig","Object","keys","forEach","action","data","filteredPurposeConfigArray","filter","noactionsavailable","length","assign","Selectors","buttons","btnStartSimplification","btnStartTranslation","btnStartTTS","btnStartImgGen","btnOpenSettingsImgGen","btnStartFree","taResult","elements","spanResult","editor","modal","AiModal","create","templateContext","$root","getRoot","on","ModalEvents","save","selectedText","selection","getContent","newText","document","getElementById","value","setContent","insertContent","simplifyButton","addEventListener","stripHtmlTags","cmdPrompt","cmdPromptSimplify","options","confirmationpersonaldata","confirmation","simplification","checked","getSinglePromptResult","translateButton","cmdPromptTranslate","cmdPromptend","language","translationOutputlanguage","translation","ttsButton","cmdPromptTTS","itemid","filename","Math","random","toString","slice","ttsOutputlanguage","voice","ttsOutputVoice","getMP3","imggenButton","cmdPromptImgGen","imagesize","imggenwidth","imggenheight","getIMG","freePromptButton","prompt","freerompt","free","classList","remove","previewWrapperId","add","StrPleaseWait","innerHTML","requestresult","retrieveResult","result","previewSectionId","fileUrl","node","audiotag","createElement","controls","src","type","appendChild","StrNotConfirmed","img","purpose","JSON","stringify","error","code","errorString","html","span","textContent"],"mappings":"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"}