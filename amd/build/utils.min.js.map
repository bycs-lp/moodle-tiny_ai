{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @copyright   2024, ISB Bayern\n * @author      Dr. Peter Mayer\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import Modal from 'core/modal';\nimport AiModal from './modal';\nimport Selectors from './selectors';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport ModalEvents from 'core/modal_events';\n\n// export const handleAction = (editor) => {\n//     openingSelection = editor.selection.getBookmark();\n//     displayDialogue(editor);\n// };\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = (data) => {\n    return Object.assign({}, {\n        'defaultprompt-simplify': \"Simplify the following text:\",\n        'btnIdStartSimplification': Selectors.buttons.btnStartSimplification,\n        'defaultprompt-translate': \"Translate the following text to american english:\",\n        'btnIdStartTranslation': Selectors.buttons.btnStartTranslation,\n        taResult: Selectors.elements.taResult,\n        spanResult: Selectors.elements.spanResult,\n    }, data);\n};\n\n/**\n * Shows and handles the dialog.\n *\n * @param {*} editor\n * @param {*} data\n */\nexport const displayDialogue = async (editor, data = {}) => {\n\n    const modal = await AiModal.create({\n        templateContext: getTemplateContext(data)\n    });\n\n    const $root = modal.getRoot();\n    const root = $root[0];\n\n    $root.on(ModalEvents.save, () => {\n        let selectedText = editor.selection.getContent();\n        let newText = document.getElementById(Selectors.elements.taResult).value;\n        if (selectedText) {\n            editor.selection.setContent(newText);\n        } else {\n            editor.insertContent(newText);\n        }\n    });\n\n    root.addEventListener('click', (e) => {\n        hideAllSettingsSections();\n\n        const simplifyButton = e.target.closest('#tiny_ai-simplify');\n        if (simplifyButton) {\n            showSettingSection(Selectors.elements.settingsIdSimplify);\n        }\n\n        const translateButton = e.target.closest('#tiny_ai-translate');\n        if (translateButton) {\n            showSettingSection(Selectors.elements.settingsIdTranslate);\n        }\n\n        const text2peechButton = e.target.closest('#tiny_ai-text-to-speech');\n        if (text2peechButton) {\n            window.console.log(\"Button T2S Clicked.\");\n        }\n\n        return;\n    });\n\n    document.getElementById(Selectors.buttons.btnStartSimplification).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptSimplify).value;\n        getChatResult(cmdPrompt, selectedText);\n    });\n\n    document.getElementById(Selectors.buttons.btnStartTranslation).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptTranslate).value;\n        getChatResult(cmdPrompt, selectedText);\n    });\n};\n\n/**\n * Get the Chat result.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n */\nconst getChatResult = (cmdPrompt, selectedText) => {\n    let prompt = cmdPrompt + \" \" + selectedText;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n\n    retrieveResult('chat', prompt).then(result => {\n        document.getElementById(Selectors.elements.taResult).value = result;\n    });\n};\n\n/**\n * Hides all setting blocks\n */\nconst hideAllSettingsSections = () => {\n    [document.getElementsByClassName(Selectors.elements.classPurposeSettings)].forEach((x) => { x.className += ' hidden';});\n};\n\n/**\n * Show the settings block of the option selected.\n *\n * @param {string} selectorID\n */\nconst showSettingSection = (selectorID) => {\n    document.getElementById(selectorID).classList.remove(\"hidden\");\n};\n\n/**\n * Get the async answer from the LLM.\n *\n * @param {string} purpose\n * @param {string} prompt\n * @returns {string}\n */\nconst retrieveResult = async (purpose, prompt) => {\n    let result = await makeRequest(purpose, prompt);\n    return result;\n};\n"],"names":["getTemplateContext","data","Object","assign","Selectors","buttons","btnStartSimplification","btnStartTranslation","taResult","elements","spanResult","async","editor","modal","AiModal","create","templateContext","$root","getRoot","root","on","ModalEvents","save","selectedText","selection","getContent","newText","document","getElementById","value","setContent","insertContent","addEventListener","e","hideAllSettingsSections","target","closest","showSettingSection","settingsIdSimplify","settingsIdTranslate","window","console","log","cmdPrompt","cmdPromptSimplify","getChatResult","cmdPromptTranslate","prompt","classList","remove","retrieveResult","then","result","getElementsByClassName","classPurposeSettings","forEach","x","className","selectorID","purpose"],"mappings":";;;;;;;2OAwCMA,mBAAsBC,MACjBC,OAAOC,OAAO,GAAI,0BACK,wDACEC,mBAAUC,QAAQC,iDACnB,0EACFF,mBAAUC,QAAQE,oBAC3CC,SAAUJ,mBAAUK,SAASD,SAC7BE,WAAYN,mBAAUK,SAASC,YAChCT,+BASwBU,eAAOC,YAAQX,4DAAO,SAE3CY,YAAcC,eAAQC,OAAO,CAC/BC,gBAAiBhB,mBAAmBC,QAGlCgB,MAAQJ,MAAMK,UACdC,KAAOF,MAAM,GAEnBA,MAAMG,GAAGC,sBAAYC,MAAM,SACnBC,aAAeX,OAAOY,UAAUC,aAChCC,QAAUC,SAASC,eAAexB,mBAAUK,SAASD,UAAUqB,MAC/DN,aACAX,OAAOY,UAAUM,WAAWJ,SAE5Bd,OAAOmB,cAAcL,YAI7BP,KAAKa,iBAAiB,SAAUC,IAC5BC,0BAEuBD,EAAEE,OAAOC,QAAQ,sBAEpCC,mBAAmBjC,mBAAUK,SAAS6B,oBAGlBL,EAAEE,OAAOC,QAAQ,uBAErCC,mBAAmBjC,mBAAUK,SAAS8B,qBAGjBN,EAAEE,OAAOC,QAAQ,4BAEtCI,OAAOC,QAAQC,IAAI,0BAM3Bf,SAASC,eAAexB,mBAAUC,QAAQC,wBAAwB0B,iBAAiB,SAAS,SACpFT,aAAeX,OAAOY,UAAUC,aAChCkB,UAAYhB,SAASC,eAAexB,mBAAUK,SAASmC,mBAAmBf,MAC9EgB,cAAcF,UAAWpB,iBAG7BI,SAASC,eAAexB,mBAAUC,QAAQE,qBAAqByB,iBAAiB,SAAS,SACjFT,aAAeX,OAAOY,UAAUC,aAChCkB,UAAYhB,SAASC,eAAexB,mBAAUK,SAASqC,oBAAoBjB,MAC/EgB,cAAcF,UAAWpB,wBAS3BsB,cAAgB,CAACF,UAAWpB,oBAC1BwB,OAASJ,UAAY,IAAMpB,aAI/BI,SAASC,eAAexB,mBAAUK,SAASC,YAAYsC,UAAUC,OAAO,UAExEC,eAAe,OAAQH,QAAQI,MAAKC,SAChCzB,SAASC,eAAexB,mBAAUK,SAASD,UAAUqB,MAAQuB,WAO/DlB,wBAA0B,MAC3BP,SAAS0B,uBAAuBjD,mBAAUK,SAAS6C,uBAAuBC,SAASC,IAAQA,EAAEC,WAAa,cAQzGpB,mBAAsBqB,aACxB/B,SAASC,eAAe8B,YAAYV,UAAUC,OAAO,WAUnDC,eAAiBvC,MAAOgD,QAASZ,eAChB,6BAAYY,QAASZ"}