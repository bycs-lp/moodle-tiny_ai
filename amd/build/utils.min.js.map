{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @module      tiny_ai/utils\n * @copyright   2024, ISB Bayern\n * @author      Dr. Peter Mayer\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import Modal from 'core/modal';\nimport AiModal from './modal';\nimport Selectors from './selectors';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport ModalEvents from 'core/modal_events';\nimport Config from 'core/config';\nimport {getDraftItemId} from 'editor_tiny/options';\n\n// export const handleAction = (editor) => {\n//     openingSelection = editor.selection.getBookmark();\n//     displayDialogue(editor);\n// };\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = (data) => {\n    return Object.assign({}, {\n        'defaultprompt-simplify': \"Simplify the following text:\",\n        'btnIdStartSimplification': Selectors.buttons.btnStartSimplification,\n\n        'defaultprompt-translate': \"Translate the following text to american english:\",\n        'btnIdStartTranslation': Selectors.buttons.btnStartTranslation,\n\n        'defaultprompt-tts': \"\",\n        'btnIdStartTTS': Selectors.buttons.btnStartTTS,\n\n        taResult: Selectors.elements.taResult,\n\n        spanResult: Selectors.elements.spanResult,\n    }, data);\n};\n\n/**\n * Shows and handles the dialog.\n *\n * @param {*} editor\n * @param {*} data\n */\nexport const displayDialogue = async (editor, data = {}) => {\n\n    const modal = await AiModal.create({\n        templateContext: getTemplateContext(data)\n    });\n\n    const $root = modal.getRoot();\n    const root = $root[0];\n\n    $root.on(ModalEvents.save, () => {\n        let selectedText = editor.selection.getContent();\n        let newText = document.getElementById(Selectors.elements.taResult).value;\n        if (selectedText) {\n            editor.selection.setContent(newText);\n        } else {\n            editor.insertContent(newText);\n        }\n    });\n\n    root.addEventListener('click', (e) => {\n        hideAllSettingsSections();\n\n        const simplifyButton = e.target.closest('#tiny_ai-simplify');\n        if (simplifyButton) {\n            hideAllSettingsSections();\n            showSettingSection(Selectors.elements.settingsIdSimplify);\n        }\n\n        const translateButton = e.target.closest('#tiny_ai-translate');\n        if (translateButton) {\n            hideAllSettingsSections();\n            showSettingSection(Selectors.elements.settingsIdTranslate);\n        }\n\n        const text2peechButton = e.target.closest('#tiny_ai-text-to-speech');\n        if (text2peechButton) {\n            hideAllSettingsSections();\n            showSettingSection(Selectors.elements.settingsIdTTS);\n        }\n\n        return;\n    });\n\n    document.getElementById(Selectors.buttons.btnStartSimplification).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptSimplify).value;\n        getChatResult(cmdPrompt, selectedText);\n    });\n\n    document.getElementById(Selectors.buttons.btnStartTranslation).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptTranslate).value;\n        getChatResult(cmdPrompt, selectedText);\n    });\n\n    document.getElementById(Selectors.buttons.btnStartTTS).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptTTS).value;\n        const options = {};\n        options.itemid = getDraftItemId(editor);\n        options.filename = \"tts_\" + Math.random().toString(16).slice(2) + \".mp3\";\n        getMP3(cmdPrompt, selectedText, options);\n    });\n};\n\n/**\n * Get the Chat result.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n */\nconst getChatResult = (cmdPrompt, selectedText) => {\n    let prompt = cmdPrompt + \" \" + selectedText;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n\n    retrieveResult('chat', prompt).then(result => {\n        document.getElementById(Selectors.elements.taResult).value = result;\n    });\n};\n\n/**\n * Get the MP3.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getMP3 = (cmdPrompt, selectedText, options) => {\n    let prompt = cmdPrompt + \" \" + selectedText;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    // document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n\n    retrieveResult('tts', prompt, options).then(result => {\n        const fileUrl = result;\n        const uniqid = 'id' + Math.random().toString(16).slice(2);\n        let node = selectedText + '<audio class=\"tiny_ai_audio\" controls id=\"' + uniqid + '\" src=\"' + fileUrl + '\" type=\"audio/mpeg\" ></span>';\n\n        var audiotag = document.createElement('audio');\n        audiotag.controls = 'controls';\n        audiotag.src = fileUrl;\n        audiotag.type = 'audio/mpeg';\n        document.getElementById(Selectors.elements.spanResult).appendChild(audiotag);\n        document.getElementById(Selectors.elements.taResult).value = node;\n\n    });\n};\n\n/**\n * Hides all setting blocks\n */\nconst hideAllSettingsSections = () => {\n    [document.getElementsByClassName(Selectors.elements.classPurposeSettings)].forEach((x) => { x.className += ' hidden';});\n};\n\n/**\n * Show the settings block of the option selected.\n *\n * @param {string} selectorID\n */\nconst showSettingSection = (selectorID) => {\n    document.getElementById(selectorID).classList.remove(\"hidden\");\n};\n\n/**\n * Get the async answer from the LLM.\n *\n * @param {string} purpose\n * @param {string} prompt\n * @param {array} options\n * @returns {string}\n */\nconst retrieveResult = async (purpose, prompt, options = []) => {\n    let result = await makeRequest(purpose, prompt, JSON.stringify(options));\n    return result;\n};\n"],"names":["getTemplateContext","data","Object","assign","Selectors","buttons","btnStartSimplification","btnStartTranslation","btnStartTTS","taResult","elements","spanResult","async","editor","modal","AiModal","create","templateContext","$root","getRoot","root","on","ModalEvents","save","selectedText","selection","getContent","newText","document","getElementById","value","setContent","insertContent","addEventListener","e","hideAllSettingsSections","target","closest","showSettingSection","settingsIdSimplify","settingsIdTranslate","settingsIdTTS","cmdPrompt","cmdPromptSimplify","getChatResult","cmdPromptTranslate","cmdPromptTTS","options","itemid","filename","Math","random","toString","slice","getMP3","prompt","classList","remove","retrieveResult","then","result","fileUrl","uniqid","node","audiotag","createElement","controls","src","type","appendChild","getElementsByClassName","classPurposeSettings","forEach","x","className","selectorID","purpose","JSON","stringify"],"mappings":"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"}