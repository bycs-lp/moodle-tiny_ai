{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @module      tiny_ai/utils\n * @copyright   2024, ISB Bayern\n * @author      Dr. Peter Mayer\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import Modal from 'core/modal';\nimport AiModal from './modal';\nimport Selectors from './selectors';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport {getPurposeConfig} from 'local_ai_manager/config';\nimport ModalEvents from 'core/modal_events';\nimport {getDraftItemId} from 'editor_tiny/options';\nimport {getString} from 'core/str';\nimport {alert, exception as displayException} from 'core/notification';\nimport {renderInfoBox} from 'local_ai_manager/render_infobox';\nimport {getContextId} from 'editor_tiny/options';\nimport {getUserId} from 'tiny_ai/options';\nimport {renderUserQuota} from 'local_ai_manager/userquota';\nimport {call as fetchMany} from 'core/ajax';\nimport {selectionbarSource, toolbarSource, menubarSource} from 'tiny_ai/common';\n\n/**\n * Define the purposes for the actions available in tiny_ai.\n *\n * @type {{imggen: string, freeprompt: string, tts: string, simplify: string, translate: string}}\n */\nconst purposes = {\n    simplify: 'singleprompt',\n    translate: 'singleprompt',\n    imggen: 'imggen',\n    tts: 'tts',\n    freeprompt: 'singleprompt',\n};\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = async(data) => {\n    return Object.assign({\n        'btnIdStartSimplification': Selectors.buttons.btnStartSimplification,\n\n        'defaultprompt-translate': \"\",\n        'btnIdStartTranslation': Selectors.buttons.btnStartTranslation,\n\n        'defaultprompt-tts': \"\",\n        'btnIdStartTTS': Selectors.buttons.btnStartTTS,\n\n        'defaultprompt-imggen': \"Generiere bitte ein Bild mit folgenden Eigenschaften: ...\",\n        'btnIdStartImgGen': Selectors.buttons.btnStartImgGen,\n        'btnOpenSettingsImgGen': Selectors.buttons.btnOpenSettingsImgGen,\n\n        'btnIdStartFree': Selectors.buttons.btnStartFree,\n\n        taResult: Selectors.elements.taResult,\n\n        spanResult: Selectors.elements.spanResult,\n    }, data);\n};\n\n/**\n * Shows and handles the dialog.\n *\n * @param {*} editor\n * @param {string} source the different sources from where the modal is being created, defined in common module\n */\nexport const displayDialogue = async (editor, source) => {\n    if (source === selectionbarSource) {\n        // TODO show the modal content when clicked by selectionbar\n    } else if (source === toolbarSource || source === menubarSource) {\n        // TODO show other modal content\n    }\n\n    const data = {};\n    const purposeConfig = await getPurposeConfig();\n    if (!purposeConfig.tenantenabled) {\n        await alert('Not enabled', 'Your ByCS admin has not enabled the AI tools yet');\n        return;\n    }\n    Object.keys(purposes).forEach(action => {\n        const templatekey = 'show' + action;\n        data[templatekey] = purposeConfig[purposes[action]] !== null;\n    });\n    // We remove all purposes which we are not using in tiny_ai.\n    const filteredPurposeConfigArray = Object.keys(purposes).filter(action => purposeConfig[purposes[action]] !== null);\n    // If there are no purposes left the tenant has not configured any purpose we need. We show a message in this case.\n    data.noactionsavailable = filteredPurposeConfigArray.length === 0;\n    const usedPurposes = new Set(filteredPurposeConfigArray.map(localPurpose => purposes[localPurpose]));\n    for (const purpose of usedPurposes) {\n        const config = await getPurposeOptions(purpose);\n        if (purpose === 'tts') {\n            data.voices = config.voices;\n            data.languages = config.languages;\n        }\n    }\n    if (data.voices.length > 0) {\n        data.showvoices = true;\n    }\n    if (data.languages.length > 0) {\n        data.showlanguages = true;\n    }\n\n    const modal = await AiModal.create({\n        templateContext: await getTemplateContext(data)\n    });\n\n    const $root = modal.getRoot();\n\n    $root.on(ModalEvents.save, () => {\n        const selectedText = editor.selection.getContent();\n        const newText = document.getElementById(Selectors.elements.taResult).value;\n        if (selectedText) {\n            editor.selection.setContent(newText);\n        } else {\n            editor.insertContent(newText);\n        }\n    });\n\n    const simplifyButton = document.getElementById(Selectors.buttons.btnStartSimplification);\n    if (simplifyButton) {\n        simplifyButton.addEventListener('click', () => {\n            const selectedText = stripHtmlTags(editor.selection.getContent());\n            let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptSimplify).value;\n            const options = {};\n            // TODO Bad place to insert this, should be done in retrieve result, but passing the context id around is also nasty.\n            //  We probably should make a class out of this module.\n            options.contextid = getContextId(editor);\n            getSinglePromptResult(cmdPrompt, selectedText, options);\n        });\n    }\n\n    const translateButton = document.getElementById(Selectors.buttons.btnStartTranslation);\n    if (translateButton) {\n        translateButton.addEventListener('click', () => {\n            const selectedText = stripHtmlTags(editor.selection.getContent());\n            let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptTranslate).value;\n            const options = {};\n            options.contextid = getContextId(editor);\n            options.language = document.getElementById(Selectors.elements.translationOutputlanguage).value;\n            options.translation = true;\n\n            let cmdPromptend;\n\n            if (options.translation) {\n                cmdPromptend = 'Translate the following text to ' + options.language;\n            }\n\n            if (cmdPrompt) {\n                cmdPromptend += \" \" + cmdPrompt;\n            }\n\n            getSinglePromptResult(cmdPromptend, selectedText, options);\n        });\n    }\n\n    const ttsButton = document.getElementById(Selectors.buttons.btnStartTTS);\n    if (ttsButton) {\n        ttsButton.addEventListener('click', () => {\n            const selectedText = stripHtmlTags(editor.selection.getContent());\n            let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptTTS).value;\n            const options = {};\n            options.itemid = getDraftItemId(editor);\n            options.filename = \"tts_\" + Math.random().toString(16).slice(2) + \".mp3\";\n            options.languages = [document.getElementById(Selectors.elements.ttsOutputlanguage).value];\n            options.voices = [document.getElementById(Selectors.elements.ttsOutputVoice).value];\n            options.contextid = getContextId(editor);\n            getMP3(cmdPrompt, selectedText, options);\n        });\n    }\n\n    const imggenButton = document.getElementById(Selectors.buttons.btnStartImgGen);\n    if (imggenButton) {\n        imggenButton.addEventListener('click', () => {\n            const selectedText = stripHtmlTags(editor.selection.getContent());\n            let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptImgGen).value;\n            const options = {};\n            options.itemid = getDraftItemId(editor);\n            options.filename = \"imggen_\" + Math.random().toString(16).slice(2) + \".png\";\n            options.imagesize = document.getElementById(Selectors.elements.imggenwidth).value;\n            options.imagesize += \"x\" + document.getElementById(Selectors.elements.imggenheight).value;\n            options.contextid = getContextId(editor);\n            getIMG(cmdPrompt, selectedText, options);\n        });\n    }\n\n    const freePromptButton = document.getElementById(Selectors.buttons.btnStartFree);\n    if (freePromptButton) {\n        freePromptButton.addEventListener('click', () => {\n            let prompt = document.getElementById(Selectors.elements.freerompt).value;\n            const options = {};\n            options.contextid = getContextId(editor);\n            getSinglePromptResult(prompt, \"\", options);\n        });\n    }\n    await renderInfoBox('tiny_ai', getUserId(editor), '.tiny_ai_modal_body [data-content=\"local_ai_manager_infobox\"]');\n    // TODO Only inject purposes we are really using depending\n    // Set is being used here to unique'ify the array.\n    const purposesToShowQuota = [...new Set(filteredPurposeConfigArray.map(purpose => purposes[purpose]))];\n    await renderUserQuota('[data-component=\"tiny_ai\"][data-content=\"local_ai_manager_userquota\"]', purposesToShowQuota);\n};\n\n/**\n * Get the Chat result.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getSinglePromptResult = async(cmdPrompt, selectedText, options) => {\n\n    const prompt = cmdPrompt + \": \" + selectedText;\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.previewWrapperId).classList.add(\"hidden\");\n\n    const StrPleaseWait = await getString('results_please_wait', 'tiny_ai');\n    document.getElementById(Selectors.elements.taResult).value = StrPleaseWait;\n\n    const requestresult = await retrieveResult('singleprompt', prompt, options);\n\n    if (requestresult === null) {\n        document.getElementById(Selectors.elements.taResult).value = '';\n        return;\n    }\n\n    document.getElementById(Selectors.elements.taResult).value = requestresult.result;\n};\n\n/**\n * Get the MP3.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getMP3 = async(cmdPrompt, selectedText, options) => {\n    const prompt = cmdPrompt + \" \" + selectedText;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    // document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.spanResult).classList.add(\"hidden\");\n    document.getElementById(Selectors.elements.previewWrapperId).classList.remove(\"hidden\");\n\n    const StrPleaseWait = await getString('results_please_wait', 'tiny_ai');\n    document.getElementById(Selectors.elements.previewSectionId).innerHTML = StrPleaseWait;\n\n    const requestresult = await retrieveResult(purposes.tts, prompt, options);\n    if (requestresult === null) {\n        return;\n    }\n    const fileUrl = requestresult.result;\n\n    // Add the audio tag to the textarea, that is inserted later to the main editor.\n    const node = selectedText + '<audio class=\"tiny_ai_audio\" controls src=\"' + fileUrl + '\" type=\"audio/mpeg\"/>';\n    document.getElementById(Selectors.elements.taResult).value = node;\n\n    // Finally generate the preview audio tag.\n    const audiotag = document.createElement('audio');\n    audiotag.controls = 'controls';\n    audiotag.src = fileUrl;\n    audiotag.type = 'audio/mpeg';\n    document.getElementById(Selectors.elements.previewSectionId).innerHTML = \"\";\n    document.getElementById(Selectors.elements.previewSectionId).appendChild(audiotag);\n\n};\n\n/**\n * Get the IMG.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getIMG = async(cmdPrompt, selectedText, options) => {\n    const prompt = cmdPrompt;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    // document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.spanResult).classList.add('hidden');\n    document.getElementById(Selectors.elements.previewWrapperId).classList.remove('hidden');\n\n    const StrPleaseWait = await getString('results_please_wait', 'tiny_ai');\n    document.getElementById(Selectors.elements.previewSectionId).innerHTML = StrPleaseWait;\n\n    const requestresult = await retrieveResult(purposes.imggen, prompt, options);\n    if (retrieveResult === null) {\n        return;\n    }\n\n    const fileUrl = requestresult.result;\n\n    // Add the img tag to the textarea, that is inserted later to the main editor.\n    const node = selectedText + '<img class=\"tiny_ai_img\" src=\"' + fileUrl + '\" />';\n    document.getElementById(Selectors.elements.taResult).value = node;\n\n    // Finally generate the preview img tag.\n    const img = document.createElement('img');\n    img.src = fileUrl;\n    document.getElementById(Selectors.elements.previewSectionId).innerHTML = '';\n    document.getElementById(Selectors.elements.previewSectionId).appendChild(img);\n};\n\n/**\n * Get the async answer from the LLM.\n *\n * @param {string} purpose\n * @param {string} prompt\n * @param {object} options\n * @returns {string}\n */\nconst retrieveResult = async(purpose, prompt, options = {}) => {\n    options.component = 'tiny_ai';\n    let result;\n    try {\n        result = await makeRequest(purpose, prompt, JSON.stringify(options));\n    } catch (error) {\n        displayException(error);\n    }\n    if (result.code !== 200) {\n        const errorString = await getString('errorwithcode', 'tiny_ai', result.code);\n        await alert(errorString, result.result);\n        return null;\n    }\n\n    return result;\n};\n\nconst getPurposeOptions = async(purpose) => {\n    let result;\n    try {\n        result = await retrievePurposeOptions(purpose);\n    } catch (error) {\n        displayException(error);\n    }\n    return JSON.parse(result.options);\n};\n\nconst retrievePurposeOptions = (purpose) => fetchMany([{\n    methodname: 'local_ai_manager_get_purpose_options',\n    args: {\n        'purpose': purpose\n    },\n}])[0];\n\n\nconst stripHtmlTags = (html) => {\n    // Place selected content into a temporary span and extract the plain text from it to strip HTML tags.\n    const span = document.createElement('span');\n    span.innerHTML = html;\n    return span.textContent;\n};\n"],"names":["purposes","simplify","translate","imggen","tts","freeprompt","getTemplateContext","async","Object","assign","Selectors","buttons","btnStartSimplification","btnStartTranslation","btnStartTTS","btnStartImgGen","btnOpenSettingsImgGen","btnStartFree","taResult","elements","spanResult","data","editor","source","selectionbarSource","toolbarSource","menubarSource","purposeConfig","tenantenabled","keys","forEach","action","filteredPurposeConfigArray","filter","noactionsavailable","length","usedPurposes","Set","map","localPurpose","purpose","config","getPurposeOptions","voices","languages","showvoices","showlanguages","AiModal","create","templateContext","getRoot","on","ModalEvents","save","selectedText","selection","getContent","newText","document","getElementById","value","setContent","insertContent","simplifyButton","addEventListener","stripHtmlTags","cmdPrompt","cmdPromptSimplify","options","contextid","getSinglePromptResult","translateButton","cmdPromptTranslate","cmdPromptend","language","translationOutputlanguage","translation","ttsButton","cmdPromptTTS","itemid","filename","Math","random","toString","slice","ttsOutputlanguage","ttsOutputVoice","getMP3","imggenButton","cmdPromptImgGen","imagesize","imggenwidth","imggenheight","getIMG","freePromptButton","prompt","freerompt","purposesToShowQuota","classList","remove","previewWrapperId","add","StrPleaseWait","requestresult","retrieveResult","result","previewSectionId","innerHTML","fileUrl","node","audiotag","createElement","controls","src","type","appendChild","img","component","JSON","stringify","error","code","errorString","retrievePurposeOptions","parse","methodname","args","html","span","textContent"],"mappings":"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"}