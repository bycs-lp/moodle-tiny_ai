{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @package     tiny_ai\n * @copyright   2024, ISB Bayern\n * @author      Dr. Peter Mayer\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import Modal from 'core/modal';\nimport AiModal from './modal';\nimport Selectors from './selectors';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport ModalEvents from 'core/modal_events';\n\n// export const handleAction = (editor) => {\n//     openingSelection = editor.selection.getBookmark();\n//     displayDialogue(editor);\n// };\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {Editor} editor\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = (editor, data) => {\n    return Object.assign({}, {\n        'defaultprompt-simplify': \"Simplify the following text:\",\n        'btnIdStartSimplification': Selectors.buttons.btnStartSimplification,\n        taResult: Selectors.elements.taResult,\n        spanResult: Selectors.elements.spanResult,\n    }, data);\n};\n\n/**\n * Shows and handles the dialog.\n *\n * @param {*} editor\n * @param {*} data\n */\nexport const displayDialogue = async (editor, data = {}) => {\n\n    const modal = await AiModal.create({\n        templateContext: getTemplateContext(editor, data)\n    });\n\n    const $root = modal.getRoot();\n    const root = $root[0];\n\n    $root.on(ModalEvents.save, () => {\n        let selectedText = editor.selection.getContent();\n        let newText = document.getElementById(Selectors.elements.taResult).value;\n        if (selectedText) {\n            editor.selection.setContent(newText);\n        } else {\n            editor.insertContent(result);\n        }\n    });\n\n    root.addEventListener('click', (e) => {\n        const simplifyButton = e.target.closest('#tiny_ai-simplify');\n        hideAllSettingsSections();\n        if (simplifyButton) {\n            showSettingSection(Selectors.elements.settingsIdSimplify);\n        }\n\n        const translateButton = e.target.closest('#tiny_ai-translate');\n        if (translateButton) {\n            window.console.log(\"Button Translate Clicked.\");\n        }\n\n        const text2peechButton = e.target.closest('#tiny_ai-text-to-speech');\n        if (text2peechButton) {\n            window.console.log(\"Button T2S Clicked.\");\n        }\n\n        return;\n    });\n\n    document.getElementById(Selectors.buttons.btnStartSimplification).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptSimplify).value;\n        getChatResult(cmdPrompt, selectedText);\n    });\n};\n\n/**\n * Get the Chat result.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n */\nconst getChatResult = (cmdPrompt, selectedText) => {\n    let prompt = cmdPrompt + \" \" + selectedText;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n\n    retrieveResult('chat', prompt).then(result => {\n        document.getElementById(Selectors.elements.taResult).value = result;\n    });\n};\n\n/**\n * Hides all setting blocks\n */\nconst hideAllSettingsSections = () => {\n    [document.getElementsByClassName(Selectors.elements.classPurposeSettings)].forEach(x => x.className += ' hidden');\n};\n\n/**\n * Show the settings block of the option selected.\n *\n * @param {string} selectorID\n */\nconst showSettingSection = (selectorID) => {\n    document.getElementById(selectorID).classList.remove(\"hidden\");\n};\n\n/**\n * Get the async answer from the LLM.\n *\n * @param {string} purpose\n * @param {string} prompt\n * @returns {string}\n */\nconst retrieveResult = async (purpose, prompt) => {\n    result = await makeRequest(purpose, prompt);\n    return result;\n}\n\n/**\n * Get anchor element.\n *\n * @param {TinyMCE} editor\n * @param {Element} selectedElm\n * @returns {Element}\n */\nconst getAnchorElement = (editor, selectedElm) => {\n    selectedElm = selectedElm || editor.selection.getNode();\n    return editor.dom.getParent(selectedElm, 'a[href]');\n};\n\n/**\n * Handle insertion of purpose, or update of an existing one.\n *\n * @param {Element} currentForm\n * @param {TinyMCE} editor\n */\nexport const setLink = (currentForm, editor) => {\n    const input = currentForm.querySelector(Selectors.elements.urlEntry);\n    let value = input.value;\n\n    if (value !== '') {\n        const pendingPromise = new Pending('tiny_link/setLink');\n        // We add a prefix if it is not already prefixed.\n        value = value.trim();\n        const expr = new RegExp(/^[a-zA-Z]*\\.*\\/|^#|^[a-zA-Z]*:/);\n        if (!expr.test(value)) {\n            value = 'http://' + value;\n        }\n\n        // Add the link.\n        setLinkOnSelection(currentForm, editor, value).then(pendingPromise.resolve);\n    }\n};\n"],"names":["getTemplateContext","editor","data","Object","assign","Selectors","buttons","btnStartSimplification","taResult","elements","spanResult","async","modal","AiModal","create","templateContext","$root","getRoot","root","on","ModalEvents","save","selectedText","selection","getContent","newText","document","getElementById","value","setContent","insertContent","result","addEventListener","e","simplifyButton","target","closest","hideAllSettingsSections","showSettingSection","settingsIdSimplify","window","console","log","cmdPrompt","cmdPromptSimplify","getChatResult","prompt","classList","remove","retrieveResult","then","getElementsByClassName","classPurposeSettings","forEach","x","className","selectorID","purpose","currentForm","querySelector","urlEntry","pendingPromise","Pending","trim","RegExp","test","setLinkOnSelection","resolve"],"mappings":";;;;;;;;4PA0CMA,mBAAqB,CAACC,OAAQC,OACzBC,OAAOC,OAAO,GAAI,0BACK,wDACEC,mBAAUC,QAAQC,uBAC9CC,SAAUH,mBAAUI,SAASD,SAC7BE,WAAYL,mBAAUI,SAASC,YAChCR,+BASwBS,eAAOV,YAAQC,4DAAO,SAE3CU,YAAcC,eAAQC,OAAO,CAC/BC,gBAAiBf,mBAAmBC,EAAQC,QAG1Cc,MAAQJ,MAAMK,UACdC,KAAOF,MAAM,GAEnBA,MAAMG,GAAGC,sBAAYC,MAAM,SACnBC,aAAerB,OAAOsB,UAAUC,aAChCC,QAAUC,SAASC,eAAetB,mBAAUI,SAASD,UAAUoB,MAC/DN,aACArB,OAAOsB,UAAUM,WAAWJ,SAE5BxB,OAAO6B,cAAcC,WAI7Bb,KAAKc,iBAAiB,SAAUC,UACtBC,eAAiBD,EAAEE,OAAOC,QAAQ,qBACxCC,0BACIH,gBACAI,mBAAmBjC,mBAAUI,SAAS8B,oBAGlBN,EAAEE,OAAOC,QAAQ,uBAErCI,OAAOC,QAAQC,IAAI,6BAGET,EAAEE,OAAOC,QAAQ,4BAEtCI,OAAOC,QAAQC,IAAI,0BAM3BhB,SAASC,eAAetB,mBAAUC,QAAQC,wBAAwByB,iBAAiB,SAAS,SACpFV,aAAerB,OAAOsB,UAAUC,aAChCmB,UAAYjB,SAASC,eAAetB,mBAAUI,SAASmC,mBAAmBhB,MAC9EiB,cAAcF,UAAWrB,wBAS3BuB,cAAgB,CAACF,UAAWrB,oBAC1BwB,OAASH,UAAY,IAAMrB,aAI/BI,SAASC,eAAetB,mBAAUI,SAASC,YAAYqC,UAAUC,OAAO,UAExEC,eAAe,OAAQH,QAAQI,MAAKnB,SAChCL,SAASC,eAAetB,mBAAUI,SAASD,UAAUoB,MAAQG,WAO/DM,wBAA0B,MAC3BX,SAASyB,uBAAuB9C,mBAAUI,SAAS2C,uBAAuBC,SAAQC,GAAKA,EAAEC,WAAa,aAQrGjB,mBAAsBkB,aACxB9B,SAASC,eAAe6B,YAAYT,UAAUC,OAAO,WAUnDC,eAAiBtC,MAAO8C,QAASX,UACnCf,aAAe,6BAAY0B,QAASX,QAC7Bf,yBAqBY,CAAC2B,YAAazD,cAE7B2B,MADU8B,YAAYC,cAActD,mBAAUI,SAASmD,UACzChC,SAEJ,KAAVA,MAAc,OACRiC,eAAiB,IAAIC,QAAQ,qBAEnClC,MAAQA,MAAMmC,OACD,IAAIC,OAAO,kCACdC,KAAKrC,SACXA,MAAQ,UAAYA,OAIxBsC,mBAAmBR,YAAazD,OAAQ2B,OAAOsB,KAAKW,eAAeM"}