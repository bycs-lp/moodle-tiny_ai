{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @module      tiny_ai/utils\n * @copyright   2024, ISB Bayern\n * @author      Dr. Peter Mayer\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import Modal from 'core/modal';\nimport AiModal from './modal';\nimport Selectors from './selectors';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport ModalEvents from 'core/modal_events';\nimport {getDraftItemId} from 'editor_tiny/options';\n\n// export const handleAction = (editor) => {\n//     openingSelection = editor.selection.getBookmark();\n//     displayDialogue(editor);\n// };\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = (data) => {\n    return Object.assign({}, {\n        'defaultprompt-simplify': \"Simplify the following text:\",\n        'btnIdStartSimplification': Selectors.buttons.btnStartSimplification,\n\n        'defaultprompt-translate': \"\",\n        'btnIdStartTranslation': Selectors.buttons.btnStartTranslation,\n\n        'defaultprompt-tts': \"\",\n        'btnIdStartTTS': Selectors.buttons.btnStartTTS,\n\n        'defaultprompt-imggen': \"Generiere bitte ein Bild mit folgenden Eigenschaften: ...\",\n        'btnIdStartImgGen': Selectors.buttons.btnStartImgGen,\n        'btnOpenSettingsImgGen': Selectors.buttons.btnOpenSettingsImgGen,\n\n        'btnIdStartFree': Selectors.buttons.btnStartFree,\n\n        taResult: Selectors.elements.taResult,\n\n        spanResult: Selectors.elements.spanResult,\n    }, data);\n};\n\n/**\n * Shows and handles the dialog.\n *\n * @param {*} editor\n * @param {*} data\n */\nexport const displayDialogue = async (editor, data = {}) => {\n\n    const modal = await AiModal.create({\n        templateContext: getTemplateContext(data)\n    });\n\n    const $root = modal.getRoot();\n\n    $root.on(ModalEvents.save, () => {\n        let selectedText = editor.selection.getContent();\n        let newText = document.getElementById(Selectors.elements.taResult).value;\n        if (selectedText) {\n            editor.selection.setContent(newText);\n        } else {\n            editor.insertContent(newText);\n        }\n    });\n\n    document.getElementById(Selectors.buttons.btnStartSimplification).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptSimplify).value;\n        const options = {};\n        getChatResult(cmdPrompt, selectedText, options);\n    });\n\n    document.getElementById(Selectors.buttons.btnStartTranslation).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptTranslate).value;\n        const options = {};\n        options.language = document.getElementById(Selectors.elements.translationOutputlanguage).value;\n        options.translation = true;\n\n        let cmdPromptend;\n\n        if (options.translation) {\n            cmdPromptend = 'Translate the following text to ' + options.language;\n        }\n\n        if (cmdPrompt) {\n            cmdPromptend += \" \" + cmdPrompt;\n        }\n\n        getChatResult(cmdPromptend, selectedText, options);\n    });\n\n    document.getElementById(Selectors.buttons.btnStartTTS).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptTTS).value;\n        const options = {};\n        options.itemid = getDraftItemId(editor);\n        options.filename = \"tts_\" + Math.random().toString(16).slice(2) + \".mp3\";\n        options.language = document.getElementById(Selectors.elements.ttsOutputlanguage).value;\n        options.voice = document.getElementById(Selectors.elements.ttsOutputVoice).value;\n        getMP3(cmdPrompt, selectedText, options);\n    });\n\n    document.getElementById(Selectors.buttons.btnStartImgGen).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptImgGen).value;\n        const options = {};\n        options.itemid = getDraftItemId(editor);\n        options.filename = \"imggen_\" + Math.random().toString(16).slice(2) + \".png\";\n        options.imagesize = document.getElementById(Selectors.elements.imggenwidth).value;\n        options.imagesize += \"x\" + document.getElementById(Selectors.elements.imggenheight).value;\n        getIMG(cmdPrompt, selectedText, options);\n    });\n\n    document.getElementById(Selectors.buttons.btnStartFree).addEventListener('click', () => {\n        let prompt = document.getElementById(Selectors.elements.freerompt).value;\n        const options = {};\n        getChatResult(prompt, \"\", options);\n    });\n\n};\n\n/**\n * Get the Chat result.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getChatResult = (cmdPrompt, selectedText, options) => {\n\n    let prompt = cmdPrompt + \": \" + selectedText;\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.previewWrapperId).classList.add(\"hidden\");\n    document.getElementById(Selectors.elements.taResult).value = \"Bitte warten, das kann ein paar Sekunden dauern!\";\n\n    retrieveResult('chat', prompt, options).then(requestresult => {\n\n        // Early exit if an error occured. Print out the error message to the output textarea.\n        if (requestresult.string == 'error') {\n            document.getElementById(Selectors.elements.taResult).value = requestresult.result;\n            return;\n        }\n\n        document.getElementById(Selectors.elements.taResult).value = requestresult.result;\n    });\n};\n\n/**\n * Get the MP3.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getMP3 = (cmdPrompt, selectedText, options) => {\n    let prompt = cmdPrompt + \" \" + selectedText;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    // document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.spanResult).classList.add(\"hidden\");\n    document.getElementById(Selectors.elements.previewWrapperId).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.previewSectionId).innerHTML = \"Bitte warten, das kann ein paar Sekunden dauern!\";\n\n    retrieveResult('tts', prompt, options).then(requestresult => {\n\n        // Early exit if an error occured. Print out the error message to the output textarea.\n        if (requestresult.string == 'error') {\n            document.getElementById(Selectors.elements.previewSectionId).innerHTML = requestresult.result;\n            return;\n        }\n\n        const fileUrl = requestresult.result;\n\n        // Add the audio tag to the textarea, that is inserted later to the main editor.\n        let node = selectedText + '<audio class=\"tiny_ai_audio\" controls src=\"' + fileUrl + '\" type=\"audio/mpeg\" ></span>';\n        document.getElementById(Selectors.elements.taResult).value = node;\n\n        // Finally generate the preview audio tag.\n        var audiotag = document.createElement('audio');\n        audiotag.controls = 'controls';\n        audiotag.src = fileUrl;\n        audiotag.type = 'audio/mpeg';\n        document.getElementById(Selectors.elements.previewSectionId).innerHTML = \"\";\n        document.getElementById(Selectors.elements.previewSectionId).appendChild(audiotag);\n\n    });\n};\n\n/**\n * Get the IMG.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getIMG = (cmdPrompt, selectedText, options) => {\n    let prompt = cmdPrompt;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    // document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.spanResult).classList.add(\"hidden\");\n    document.getElementById(Selectors.elements.previewWrapperId).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.previewSectionId).innerHTML = \"Bitte warten, das kann ein paar Sekunden dauern!\";\n\n    retrieveResult('imggen', prompt, options).then(requestresult => {\n\n        // Early exit if an error occured. Print out the error message to the output textarea.\n        if (requestresult.string == 'error') {\n            document.getElementById(Selectors.elements.previewSectionId).innerHTML = requestresult.result;\n            return;\n        }\n\n        const fileUrl = requestresult.result;\n\n        // Add the img tag to the textarea, that is inserted later to the main editor.\n        let node = selectedText + '<img class=\"tiny_ai_img\" src=\"' + fileUrl + '\" ></span>';\n        document.getElementById(Selectors.elements.taResult).value = node;\n\n        // Finally generate the preview img tag.\n        var img = document.createElement('img');\n        img.src = fileUrl;\n        document.getElementById(Selectors.elements.previewSectionId).innerHTML = \"\";\n        document.getElementById(Selectors.elements.previewSectionId).appendChild(img);\n    });\n};\n\n/**\n * Get the async answer from the LLM.\n *\n * @param {string} purpose\n * @param {string} prompt\n * @param {array} options\n * @returns {string}\n */\nconst retrieveResult = async (purpose, prompt, options = []) => {\n    let result = await makeRequest(purpose, prompt, JSON.stringify(options));\n    return result;\n};\n"],"names":["getTemplateContext","data","Object","assign","Selectors","buttons","btnStartSimplification","btnStartTranslation","btnStartTTS","btnStartImgGen","btnOpenSettingsImgGen","btnStartFree","taResult","elements","spanResult","async","editor","modal","AiModal","create","templateContext","$root","getRoot","on","ModalEvents","save","selectedText","selection","getContent","newText","document","getElementById","value","setContent","insertContent","addEventListener","cmdPrompt","cmdPromptSimplify","getChatResult","cmdPromptTranslate","options","cmdPromptend","language","translationOutputlanguage","translation","cmdPromptTTS","itemid","filename","Math","random","toString","slice","ttsOutputlanguage","voice","ttsOutputVoice","getMP3","cmdPromptImgGen","imagesize","imggenwidth","imggenheight","getIMG","prompt","freerompt","classList","remove","previewWrapperId","add","retrieveResult","then","requestresult","string","result","previewSectionId","innerHTML","fileUrl","node","audiotag","createElement","controls","src","type","appendChild","img","purpose","JSON","stringify"],"mappings":"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"}