{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @package     tiny_ai\n * @category    admin\n * @copyright   2024, ISB Bayern\n * @author      Dr. Peter Mayer\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import Modal from 'core/modal';\nimport AiModal from './modal';\n\nexport const handleAction = (editor) => {\n    openingSelection = editor.selection.getBookmark();\n    displayDialogue(editor);\n};\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {Editor} editor\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = (editor, data) => {\n    // const permissions = getPermissions(editor);\n\n    // const canShowFilePicker = typeof getFilePicker(editor, 'h5p') !== 'undefined';\n    // const canUpload = (permissions.upload && canShowFilePicker) ?? false;\n    // const canEmbed = permissions.embed ?? false;\n    // const canUploadAndEmbed = canUpload && canEmbed;\n\n    return Object.assign({}, {\n        // elementid: editor.id,\n        // canUpload,\n        // canEmbed,\n        // canUploadAndEmbed,\n        // showOptions: false,\n        // fileURL: data?.url ?? '',\n    }, data);\n};\n\nexport const displayDialogue = async (editor, data = {}) => {\n\n    const modal = await AiModal.create({\n        templateContext: getTemplateContext(editor, data),\n    });\n\n    const $root = modal.getRoot();\n    const root = $root[0];\n    // $root.on(ModalEvents.save, (event, modal) => {\n    //     handleDialogueSubmission(editor, modal, data);\n    // });\n\n    root.addEventListener('click', (e) => {\n        const simplifyButton = e.target.closest('#tiny_ai-simplify');\n        if (simplifyButton) {\n            window.console.log(\"Button Simplify Clicked.\");\n        }\n\n        const translateButton = e.target.closest('#tiny_ai-translate');\n        if (translateButton) {\n            window.console.log(\"Button Translate Clicked.\");\n        }\n\n        const text2peechButton = e.target.closest('#tiny_ai-text-to-speech');\n        if (text2peechButton) {\n            window.console.log(\"Button T2S Clicked.\");\n        }\n    });\n};\n"],"names":["editor","openingSelection","selection","getBookmark","displayDialogue","getTemplateContext","data","Object","assign","async","modal","AiModal","create","templateContext","$root","getRoot","root","addEventListener","e","target","closest","window","console","log"],"mappings":";;;;;;;;;+LA4B6BA,SACzBC,iBAAmBD,OAAOE,UAAUC,cACpCC,gBAAgBJ,eAUdK,mBAAqB,CAACL,OAAQM,OAQzBC,OAAOC,OAAO,GAAI,GAOtBF,MAGMF,gBAAkBK,eAAOT,YAAQM,4DAAO,SAE3CI,YAAcC,eAAQC,OAAO,CAC/BC,gBAAiBR,mBAAmBL,EAAQM,QAG1CQ,MAAQJ,MAAMK,UACdC,KAAOF,MAAM,GAKnBE,KAAKC,iBAAiB,SAAUC,IACLA,EAAEC,OAAOC,QAAQ,sBAEpCC,OAAOC,QAAQC,IAAI,4BAGCL,EAAEC,OAAOC,QAAQ,uBAErCC,OAAOC,QAAQC,IAAI,6BAGEL,EAAEC,OAAOC,QAAQ,4BAEtCC,OAAOC,QAAQC,IAAI"}