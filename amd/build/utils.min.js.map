{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @module      tiny_ai/utils\n * @copyright   2024, ISB Bayern\n * @author      Dr. Peter Mayer\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import Modal from 'core/modal';\nimport AiModal from './modal';\nimport Selectors from './selectors';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport {getPurposeConfig} from 'local_ai_manager/config';\nimport ModalEvents from 'core/modal_events';\nimport {getDraftItemId} from 'editor_tiny/options';\nimport {getString} from 'core/str';\nimport {alert, exception as displayException} from 'core/notification';\nimport {renderInfoBox} from 'local_ai_manager/render_infobox';\nimport {getContextId} from 'editor_tiny/options';\nimport {getUserId} from 'tiny_ai/options';\nimport {renderUserQuota} from 'local_ai_manager/userquota';\nimport {constants} from 'tiny_ai/constants';\nimport {selectionbarSource, toolbarSource, menubarSource} from 'tiny_ai/common';\nimport * as Renderer from 'tiny_ai/renderer';\nimport Templates from 'core/templates';\n\n\nlet userId = null;\nlet modal = null;\n\nexport const init = async (editor) => {\n    userId = getUserId(editor)\n}\n\n/**\n * Shows and handles the dialog.\n *\n * @param {string} source the different sources from where the modal is being created, defined in common module\n */\nexport const displayDialogue = async (source) => {\n    let mode;\n    if (source === selectionbarSource) {\n        mode = constants.modalModes.selection;\n    } else if (source === toolbarSource || source === menubarSource) {\n        mode = constants.modalModes.general;\n    }\n\n    await Renderer.init();\n\n    // We initially render the modal without content, because we need to rerender it anyway.\n    modal = await AiModal.create({\n        templateContext: {\n            classes: 'tiny_ai-modal--dialog',\n            headerclasses: 'tiny_ai-modal--header'\n        }\n    });\n    // Unfortunately, the modal will not execute any JS code in the template, so we need to rerender the modal as a whole again.\n    await Renderer.renderStart(mode);\n};\n\n/**\n * Re-renders the content auf the modal once it has been created.\n *\n * @param bodyComponentTemplate the name of the body template to use (without the prefix 'tiny_ai/components/')\n * @param footerComponentTemplate the name of the footer template to use (without the prefix 'tiny_ai/components/')\n * @param templateContext the template context being used for all partial templates\n * @returns {Promise<void>} the async promise\n */\nexport const renderModalContent = async (bodyComponentTemplate, footerComponentTemplate, templateContext) => {\n    const result = await Promise.all([\n        Templates.renderForPromise('tiny_ai/components/moodle-modal-header-title', templateContext),\n        Templates.renderForPromise('tiny_ai/components/' + bodyComponentTemplate, templateContext),\n        Templates.renderForPromise('tiny_ai/components/' + footerComponentTemplate, templateContext)\n    ]);\n    if (templateContext.hasOwnProperty('modal_headline')) {\n        // If there is no headline specified, we keep the old one.\n        modal.setTitle(result[0].html);\n    }\n    modal.setBody(result[1].html);\n    modal.setFooter(result[2].html);\n    result.forEach((item) => {\n        Templates.runTemplateJS(item.js);\n    })\n    await insertInfoBox();\n    await insertUserQuotaBox();\n};\n\nexport const insertInfoBox = async () => {\n    // TODO extract used purposes\n    const infoBoxSelector = '[data-rendertarget=\"infobox\"]';\n    if (document.querySelector(infoBoxSelector)) {\n        await renderInfoBox('tiny_ai', userId, infoBoxSelector, ['singleprompt', 'tts', 'imggen']);\n    }\n};\n\nexport const insertUserQuotaBox = async () => {\n    const usageBoxSelector = '[data-rendertarget=\"usageinfo\"]';\n    if (document.querySelector(usageBoxSelector)) {\n        await renderUserQuota(usageBoxSelector, ['singleprompt', 'tts', 'imggen']);\n    }\n};\n\n"],"names":["userId","modal","async","editor","mode","source","selectionbarSource","constants","modalModes","selection","toolbarSource","menubarSource","general","Renderer","init","AiModal","create","templateContext","classes","headerclasses","renderStart","bodyComponentTemplate","footerComponentTemplate","result","Promise","all","Templates","renderForPromise","hasOwnProperty","setTitle","html","setBody","setFooter","forEach","item","runTemplateJS","js","insertInfoBox","insertUserQuotaBox","document","querySelector"],"mappings":";;;;;;;;ohCA2CIA,OAAS,KACTC,MAAQ,mBAEQC,MAAAA,SAChBF,QAAS,uBAAUG,kCAQQD,MAAAA,aACvBE,KACAC,SAAWC,2BACXF,KAAOG,qBAAUC,WAAWC,UACrBJ,SAAWK,uBAAiBL,SAAWM,wBAC9CP,KAAOG,qBAAUC,WAAWI,eAG1BC,SAASC,OAGfb,YAAcc,eAAQC,OAAO,CACzBC,gBAAiB,CACbC,QAAS,wBACTC,cAAe,iCAIjBN,SAASO,YAAYhB,mCAWGF,MAAOmB,sBAAuBC,wBAAyBL,yBAC/EM,aAAeC,QAAQC,IAAI,CAC7BC,mBAAUC,iBAAiB,+CAAgDV,iBAC3ES,mBAAUC,iBAAiB,sBAAwBN,sBAAuBJ,iBAC1ES,mBAAUC,iBAAiB,sBAAwBL,wBAAyBL,mBAE5EA,gBAAgBW,eAAe,mBAE/B3B,MAAM4B,SAASN,OAAO,GAAGO,MAE7B7B,MAAM8B,QAAQR,OAAO,GAAGO,MACxB7B,MAAM+B,UAAUT,OAAO,GAAGO,MAC1BP,OAAOU,SAASC,0BACFC,cAAcD,KAAKE,aAE3BC,sBACAC,4BAGGD,cAAgBnC,UAGrBqC,SAASC,cADW,wCAEd,iCAAc,UAAWxC,OAFX,gCAEoC,CAAC,eAAgB,MAAO,uDAI3EsC,mBAAqBpC,UAE1BqC,SAASC,cADY,0CAEf,8BAFe,kCAEmB,CAAC,eAAgB,MAAO"}