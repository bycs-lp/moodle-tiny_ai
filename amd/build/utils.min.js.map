{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @module      tiny_ai/utils\n * @copyright   2024, ISB Bayern\n * @author      Dr. Peter Mayer\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import Modal from 'core/modal';\nimport AiModal from './modal';\nimport Selectors from './selectors';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport ModalEvents from 'core/modal_events';\nimport {getDraftItemId} from 'editor_tiny/options';\n\n// export const handleAction = (editor) => {\n//     openingSelection = editor.selection.getBookmark();\n//     displayDialogue(editor);\n// };\n\n/**\n * Get the template context for the dialogue.\n *\n * @param {object} data\n * @returns {object} data\n */\nconst getTemplateContext = (data) => {\n    return Object.assign({}, {\n        'defaultprompt-simplify': \"Simplify the following text:\",\n        'btnIdStartSimplification': Selectors.buttons.btnStartSimplification,\n\n        'defaultprompt-translate': \"Translate the following text to american english:\",\n        'btnIdStartTranslation': Selectors.buttons.btnStartTranslation,\n\n        'defaultprompt-tts': \"\",\n        'btnIdStartTTS': Selectors.buttons.btnStartTTS,\n\n        'defaultprompt-imggen': \"Generiere bitte ein Bild mit folgenden Eigenschaften: ...\",\n        'btnIdStartImgGen': Selectors.buttons.btnStartImgGen,\n        'btnOpenSettingsImgGen': Selectors.buttons.btnOpenSettingsImgGen,\n\n        taResult: Selectors.elements.taResult,\n\n        spanResult: Selectors.elements.spanResult,\n    }, data);\n};\n\n/**\n * Shows and handles the dialog.\n *\n * @param {*} editor\n * @param {*} data\n */\nexport const displayDialogue = async (editor, data = {}) => {\n\n    const modal = await AiModal.create({\n        templateContext: getTemplateContext(data)\n    });\n\n    const $root = modal.getRoot();\n    const root = $root[0];\n\n    $root.on(ModalEvents.save, () => {\n        let selectedText = editor.selection.getContent();\n        let newText = document.getElementById(Selectors.elements.taResult).value;\n        if (selectedText) {\n            editor.selection.setContent(newText);\n        } else {\n            editor.insertContent(newText);\n        }\n    });\n\n    root.addEventListener('click', (e) => {\n        hideAllSettingsSections();\n\n        const simplifyButton = e.target.closest('#tiny_ai-simplify');\n        if (simplifyButton) {\n            hideAllSettingsSections();\n            showSettingSection(Selectors.elements.settingsIdSimplify);\n        }\n\n        const translateButton = e.target.closest('#tiny_ai-translate');\n        if (translateButton) {\n            hideAllSettingsSections();\n            showSettingSection(Selectors.elements.settingsIdTranslate);\n        }\n\n        const text2peechButton = e.target.closest('#tiny_ai-text-to-speech');\n        if (text2peechButton) {\n            hideAllSettingsSections();\n            showSettingSection(Selectors.elements.settingsIdTTS);\n        }\n\n        const imggenButton = e.target.closest('#' + Selectors.buttons.btnOpenSettingsImgGen);\n        if (imggenButton) {\n            hideAllSettingsSections();\n            showSettingSection(Selectors.elements.settingsIdImgGen);\n        }\n        return;\n    });\n\n    document.getElementById(Selectors.buttons.btnStartSimplification).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptSimplify).value;\n        getChatResult(cmdPrompt, selectedText);\n    });\n\n    document.getElementById(Selectors.buttons.btnStartTranslation).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptTranslate).value;\n        getChatResult(cmdPrompt, selectedText);\n    });\n\n    document.getElementById(Selectors.buttons.btnStartTTS).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptTTS).value;\n        const options = {};\n        options.itemid = getDraftItemId(editor);\n        options.filename = \"tts_\" + Math.random().toString(16).slice(2) + \".mp3\";\n        getMP3(cmdPrompt, selectedText, options);\n    });\n\n    document.getElementById(Selectors.buttons.btnStartImgGen).addEventListener('click', () => {\n        let selectedText = editor.selection.getContent();\n        let cmdPrompt = document.getElementById(Selectors.elements.cmdPromptImgGen).value;\n        const options = {};\n        options.itemid = getDraftItemId(editor);\n        options.filename = \"imggen_\" + Math.random().toString(16).slice(2) + \".png\";\n        getIMG(cmdPrompt, selectedText, options);\n    });\n};\n\n/**\n * Get the Chat result.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n */\nconst getChatResult = (cmdPrompt, selectedText) => {\n    let prompt = cmdPrompt + \" \" + selectedText;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n\n    retrieveResult('chat', prompt).then(requestresult => {\n\n        // Early exit if an error occured. Print out the error message to the output textarea.\n        if (requestresult.string == 'error') {\n            document.getElementById(Selectors.elements.taResult).value = requestresult.result;\n            return;\n        }\n\n        document.getElementById(Selectors.elements.taResult).value = requestresult.result;\n    });\n};\n\n/**\n * Get the MP3.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getMP3 = (cmdPrompt, selectedText, options) => {\n    let prompt = cmdPrompt + \" \" + selectedText;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    // document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n\n    retrieveResult('tts', prompt, options).then(requestresult => {\n\n        // Early exit if an error occured. Print out the error message to the output textarea.\n        if (requestresult.string == 'error') {\n            document.getElementById(Selectors.elements.taResult).value = requestresult.result;\n            return;\n        }\n\n        const fileUrl = requestresult.result;\n\n        // Add the audio tag to the textarea, that is inserted later to the main editor.\n        let node = selectedText + '<audio class=\"tiny_ai_audio\" controls src=\"' + fileUrl + '\" type=\"audio/mpeg\" ></span>';\n        document.getElementById(Selectors.elements.taResult).value = node;\n\n        // Finally generate the preview audio tag.\n        var audiotag = document.createElement('audio');\n        audiotag.controls = 'controls';\n        audiotag.src = fileUrl;\n        audiotag.type = 'audio/mpeg';\n        document.getElementById(Selectors.elements.spanResult).appendChild(audiotag);\n\n    });\n};\n\n/**\n * Get the IMG.\n * @param {string} cmdPrompt\n * @param {string} selectedText\n * @param {object} options\n */\nconst getIMG = (cmdPrompt, selectedText, options) => {\n    let prompt = cmdPrompt + \" \" + selectedText;\n\n    // Shows the results box. This should happen before the real result is shown,\n    // in order to inform the user, that we are working on it.\n    // document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n    document.getElementById(Selectors.elements.spanResult).classList.remove(\"hidden\");\n\n    retrieveResult('imggen', prompt, options).then(requestresult => {\n\n        // Early exit if an error occured. Print out the error message to the output textarea.\n        if (requestresult.string == 'error') {\n            document.getElementById(Selectors.elements.taResult).value = requestresult.result;\n            return;\n        }\n\n        const fileUrl = requestresult.result;\n\n        // Add the img tag to the textarea, that is inserted later to the main editor.\n        let node = selectedText + '<img class=\"tiny_ai_img\" src=\"' + fileUrl + '\" ></span>';\n        document.getElementById(Selectors.elements.taResult).value = node;\n\n        // Finally generate the preview img tag.\n        var img = document.createElement('img');\n        img.src = fileUrl;\n        document.getElementById(Selectors.elements.spanResult).appendChild(img);\n\n    });\n};\n\n/**\n * Hides all setting blocks\n */\nconst hideAllSettingsSections = () => {\n    [document.getElementsByClassName(Selectors.elements.classPurposeSettings)].forEach((x) => { x.className += ' hidden';});\n};\n\n/**\n * Show the settings block of the option selected.\n *\n * @param {string} selectorID\n */\nconst showSettingSection = (selectorID) => {\n    document.getElementById(selectorID).classList.remove(\"hidden\");\n};\n\n/**\n * Get the async answer from the LLM.\n *\n * @param {string} purpose\n * @param {string} prompt\n * @param {array} options\n * @returns {string}\n */\nconst retrieveResult = async (purpose, prompt, options = []) => {\n    let result = await makeRequest(purpose, prompt, JSON.stringify(options));\n    return result;\n};\n"],"names":["getTemplateContext","data","Object","assign","Selectors","buttons","btnStartSimplification","btnStartTranslation","btnStartTTS","btnStartImgGen","btnOpenSettingsImgGen","taResult","elements","spanResult","async","editor","modal","AiModal","create","templateContext","$root","getRoot","root","on","ModalEvents","save","selectedText","selection","getContent","newText","document","getElementById","value","setContent","insertContent","addEventListener","e","hideAllSettingsSections","target","closest","showSettingSection","settingsIdSimplify","settingsIdTranslate","settingsIdTTS","settingsIdImgGen","cmdPrompt","cmdPromptSimplify","getChatResult","cmdPromptTranslate","cmdPromptTTS","options","itemid","filename","Math","random","toString","slice","getMP3","cmdPromptImgGen","getIMG","prompt","classList","remove","retrieveResult","then","requestresult","string","result","fileUrl","node","audiotag","createElement","controls","src","type","appendChild","img","getElementsByClassName","classPurposeSettings","forEach","x","className","selectorID","purpose","JSON","stringify"],"mappings":"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"}