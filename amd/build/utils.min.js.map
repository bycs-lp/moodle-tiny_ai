{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @module      tiny_ai/utils\n * @copyright   2024, ISB Bayern\n * @author      Dr. Peter Mayer\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport AiModal from 'tiny_ai/modal';\nimport ModalEvents from 'core/modal_events';\nimport {getUserId} from 'tiny_ai/options';\nimport {constants} from 'tiny_ai/constants';\nimport {selectionbarSource, toolbarSource, menubarSource} from 'tiny_ai/common';\nimport * as Renderer from 'tiny_ai/renderer';\nimport DataManager from 'tiny_ai/datamanager';\nimport {alert as Alert, exception as displayException} from 'core/notification';\nimport {getString} from 'core/str';\nimport {makeRequest} from 'local_ai_manager/make_request';\nimport {getDraftItemId as getDraftItemIdTinyCore, getContextId as getContextItemIdTinyCore} from 'editor_tiny/options';\nimport * as BasedataHandler from \"./datahandler/basedata\";\nimport $ from 'jquery';\nimport Log from 'core/log';\n\nlet userId = null;\nlet modal = null;\nlet mode = null;\nlet editor = null;\n\nexport const init = async (editorObject) => {\n    editor = editorObject;\n    userId = getUserId(editor);\n};\n\n/**\n * Shows and handles the dialog.\n *\n * @param {string} source the different sources from where the modal is being created, defined in common module\n */\nexport const displayDialogue = async (source) => {\n    if (source === selectionbarSource || editor.selection.getContent().length > 0) {\n        mode = constants.modalModes.selection;\n    } else if (source === toolbarSource || source === menubarSource) {\n        mode = constants.modalModes.general;\n    }\n\n    // We initially render the modal without content, because we need to rerender it anyway.\n    modal = await AiModal.create({\n        templateContext: {\n            classes: 'tiny_ai-modal--dialog',\n            headerclasses: 'tiny_ai-modal--header'\n        }\n    });\n\n    if (mode === constants.modalModes.selection) {\n        DataManager.setSelection(editor.selection.getContent());\n    }\n    await Renderer.init(modal, userId);\n    // Unfortunately, the modal will not execute any JS code in the template, so we need to rerender the modal as a whole again.\n    await Renderer.renderStart(mode);\n    modal.getRoot().on(ModalEvents.outsideClick, event => {\n        event.preventDefault();\n    });\n};\n\nexport const getAiAnswer = async (prompt, purpose, options = {}) => {\n    let result = null;\n    try {\n        result = await makeRequest(purpose, prompt, options);\n    } catch (exception) {\n        await displayException(exception);\n        return;\n    }\n    if (result.code !== 200) {\n        const alertTitle = await getString('errorwithcode', 'tiny_ai', result.code);\n        const parsedResult = JSON.parse(result.result);\n        if (parsedResult.debuginfo) {\n            Log.error(parsedResult.debuginfo);\n        }\n        await errorAlert(parsedResult.message, alertTitle);\n        return null;\n    }\n    return result.result;\n};\n\nexport const insertAfterContent = (textToInsert) => {\n    editor.setContent(editor.getContent() + '<p>' + textToInsert + '</p>');\n};\n\n/**\n * Replaces a selected text with the given replacement.\n *\n * In case nothing is selected, it will be inserted at the current caret position.\n *\n * @param {strings} textReplacement the text by which the current selection will be replaced or which will be inserted\n *  at the caret (if no selection), can be HTML code\n */\nexport const replaceSelection = (textReplacement) => {\n    editor.selection.setContent(textReplacement);\n};\n\nexport const destroyModal = () => {\n    modal.destroy();\n};\n\nexport const getDraftItemId = () => {\n    return getDraftItemIdTinyCore(editor);\n};\n\nexport const getContextId = () => {\n    return getContextItemIdTinyCore(editor);\n};\n\nexport const getMode = () => {\n    return mode;\n};\n\nexport const errorAlert = async (message, title = null) => {\n    if (title === null) {\n        title = BasedataHandler.getTinyAiString('generalerror');\n    }\n    const alertModal = await Alert(title, message);\n    alertModal.getRoot().on(ModalEvents.hidden, () => {\n        document.querySelectorAll('button[data-action]').forEach(button => {\n            $(button).tooltip('hide');\n        });\n    });\n};\n"],"names":["userId","modal","mode","editor","async","editorObject","source","selectionbarSource","selection","getContent","length","constants","modalModes","toolbarSource","menubarSource","general","AiModal","create","templateContext","classes","headerclasses","setSelection","Renderer","init","renderStart","getRoot","on","ModalEvents","outsideClick","event","preventDefault","prompt","purpose","options","result","exception","code","alertTitle","parsedResult","JSON","parse","debuginfo","error","errorAlert","message","textToInsert","setContent","textReplacement","destroy","title","BasedataHandler","getTinyAiString","alertModal","hidden","document","querySelectorAll","forEach","button","tooltip"],"mappings":";;;;;;;;6lBAuCIA,OAAS,KACTC,MAAQ,KACRC,KAAO,KACPC,OAAS,mBAEOC,MAAAA,eAChBD,OAASE,aACTL,QAAS,sBAAUG,kCAQQC,MAAAA,SACvBE,SAAWC,4BAAsBJ,OAAOK,UAAUC,aAAaC,OAAS,EACxER,KAAOS,qBAAUC,WAAWJ,UACrBF,SAAWO,uBAAiBP,SAAWQ,wBAC9CZ,KAAOS,qBAAUC,WAAWG,SAIhCd,YAAce,eAAQC,OAAO,CACzBC,gBAAiB,CACbC,QAAS,wBACTC,cAAe,2BAInBlB,OAASS,qBAAUC,WAAWJ,gCAClBa,aAAalB,OAAOK,UAAUC,oBAExCa,SAASC,KAAKtB,MAAOD,cAErBsB,SAASE,YAAYtB,MAC3BD,MAAMwB,UAAUC,GAAGC,sBAAYC,cAAcC,QACzCA,MAAMC,0CAIa1B,eAAO2B,OAAQC,aAASC,+DAAU,GACrDC,OAAS,SAETA,aAAe,6BAAYF,QAASD,OAAQE,SAC9C,MAAOE,6BACC,2BAAiBA,cAGP,MAAhBD,OAAOE,KAAc,OACfC,iBAAmB,kBAAU,gBAAiB,UAAWH,OAAOE,MAChEE,aAAeC,KAAKC,MAAMN,OAAOA,eACnCI,aAAaG,wBACTC,MAAMJ,aAAaG,iBAErBE,WAAWL,aAAaM,QAASP,YAChC,YAEJH,OAAOA,oCAGiBW,eAC/B1C,OAAO2C,WAAW3C,OAAOM,aAAe,MAAQoC,aAAe,mCAWlCE,kBAC7B5C,OAAOK,UAAUsC,WAAWC,wCAGJ,KACxB9C,MAAM+C,mCAGoB,KACnB,4BAAuB7C,8BAGN,KACjB,0BAAyBA,yBAGb,IACZD,WAGEyC,WAAavC,eAAOwC,aAASK,6DAAQ,KAChC,OAAVA,QACAA,MAAQC,gBAAgBC,gBAAgB,uBAEtCC,iBAAmB,uBAAMH,MAAOL,SACtCQ,WAAW3B,UAAUC,GAAGC,sBAAY0B,QAAQ,KACxCC,SAASC,iBAAiB,uBAAuBC,SAAQC,6BACnDA,QAAQC,QAAQ"}