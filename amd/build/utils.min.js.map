{"version":3,"file":"utils.min.js","sources":["../src/utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Tiny AI utils library.\n *\n * @module      tiny_ai/utils\n * @copyright   2024, ISB Bayern\n * @author      Dr. Peter Mayer\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n// import Modal from 'core/modal';\nimport AiModal from './modal';\nimport {getUserId} from 'tiny_ai/options';\nimport {constants} from 'tiny_ai/constants';\nimport {selectionbarSource, toolbarSource, menubarSource} from 'tiny_ai/common';\nimport * as Renderer from 'tiny_ai/renderer';\nimport DataManager from 'tiny_ai/datamanager';\n\n\nlet userId = null;\nlet modal = null;\nlet editor = null;\n\nexport const init = async (editorObject) => {\n    editor = editorObject;\n    userId = getUserId(editor);\n}\n\n/**\n * Shows and handles the dialog.\n *\n * @param {string} source the different sources from where the modal is being created, defined in common module\n */\nexport const displayDialogue = async (source) => {\n    let mode;\n    if (source === selectionbarSource) {\n        mode = constants.modalModes.selection;\n    } else if (source === toolbarSource || source === menubarSource) {\n        mode = constants.modalModes.general;\n    }\n\n\n    // We initially render the modal without content, because we need to rerender it anyway.\n    modal = await AiModal.create({\n        templateContext: {\n            classes: 'tiny_ai-modal--dialog',\n            headerclasses: 'tiny_ai-modal--header'\n        }\n    });\n\n    if (mode === constants.modalModes.selection) {\n        console.log(editor)\n        DataManager.setSelection(editor.selection.getContent());\n    }\n    await Renderer.init(modal, userId);\n    // Unfortunately, the modal will not execute any JS code in the template, so we need to rerender the modal as a whole again.\n    await Renderer.renderStart(mode);\n};\n\n\n"],"names":["userId","modal","editor","async","editorObject","mode","source","selectionbarSource","constants","modalModes","selection","toolbarSource","menubarSource","general","AiModal","create","templateContext","classes","headerclasses","console","log","setSelection","getContent","Renderer","init","renderStart"],"mappings":";;;;;;;;u2BAiCIA,OAAS,KACTC,MAAQ,KACRC,OAAS,mBAEOC,MAAAA,eAChBD,OAASE,aACTJ,QAAS,sBAAUE,kCAQQC,MAAAA,aACvBE,KACAC,SAAWC,2BACXF,KAAOG,qBAAUC,WAAWC,UACrBJ,SAAWK,uBAAiBL,SAAWM,wBAC9CP,KAAOG,qBAAUC,WAAWI,SAKhCZ,YAAca,eAAQC,OAAO,CACzBC,gBAAiB,CACbC,QAAS,wBACTC,cAAe,2BAInBb,OAASG,qBAAUC,WAAWC,YAC9BS,QAAQC,IAAIlB,6BACAmB,aAAanB,OAAOQ,UAAUY,qBAExCC,SAASC,KAAKvB,MAAOD,cAErBuB,SAASE,YAAYpB"}