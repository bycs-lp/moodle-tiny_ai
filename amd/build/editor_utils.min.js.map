{"version":3,"file":"editor_utils.min.js","sources":["../src/editor_utils.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Editor instance specific utils.\n *\n * @module      tiny_ai/editor_utils\n * @copyright   2024, ISB Bayern\n * @author      Philipp Memmel\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport AiModal from 'tiny_ai/modal';\nimport ModalEvents from 'core/modal_events';\nimport {getUserId} from 'tiny_ai/options';\nimport {constants} from 'tiny_ai/constants';\nimport {selectionbarSource, toolbarSource, menubarSource} from 'tiny_ai/common';\nimport {getDraftItemId as getDraftItemIdTinyCore, getContextId as getContextItemIdTinyCore} from 'editor_tiny/options';\nimport {getRenderer, getDatamanager} from 'tiny_ai/utils';\n\n\nexport default class {\n\n    uniqid = null;\n    userId = null;\n    modal = null;\n    mode = null;\n    editor = null;\n\n    constructor(uniqid, editor) {\n        this.uniqid = uniqid;\n        this.editor = editor;\n        this.userId = getUserId(editor);\n    }\n\n    /**\n     * Shows and handles the dialog.\n     *\n     * @param {string} source the different sources from where the modal is being created, defined in common module\n     */\n    async displayDialogue(source) {\n        if (source === selectionbarSource || this.editor.selection.getContent().length > 0) {\n            this.mode = constants.modalModes.selection;\n        } else if (source === toolbarSource || source === menubarSource) {\n            this.mode = constants.modalModes.general;\n        }\n\n        // We initially render the modal without content, because we need to rerender it anyway.\n        this.modal = await AiModal.create({\n            templateContext: {\n                classes: 'tiny_ai-modal--dialog',\n                headerclasses: 'tiny_ai-modal--header'\n            }\n        });\n        this.modal.show();\n\n        if (this.mode === constants.modalModes.selection) {\n            getDatamanager(this.uniqid).setSelection(this.editor.selection.getContent());\n        }\n        const renderer = getRenderer(this.uniqid);\n        // Unfortunately, the modal will not execute any JS code in the template, so we need to rerender the modal as a whole again.\n        await renderer.renderStart();\n        this.modal.getRoot().on(ModalEvents.outsideClick, event => {\n            event.preventDefault();\n        });\n    }\n\n\n    insertAfterContent(textToInsert) {\n        this.editor.setContent(this.editor.getContent() + '<p>' + textToInsert + '</p>');\n    }\n\n    /**\n     * Replaces a selected text with the given replacement.\n     *\n     * In case nothing is selected, it will be inserted at the current caret position.\n     *\n     * @param {strings} textReplacement the text by which the current selection will be replaced or which will be inserted\n     *  at the caret (if no selection), can be HTML code\n     */\n    replaceSelection(textReplacement) {\n        this.editor.selection.setContent(textReplacement);\n    }\n\n    getDraftItemId() {\n        return getDraftItemIdTinyCore(this.editor);\n    }\n\n    getContextId() {\n        return getContextItemIdTinyCore(this.editor);\n    }\n\n    getMode() {\n        return this.mode;\n    }\n\n    getModal() {\n        return this.modal;\n    }\n\n    getUserId() {\n        return this.userId;\n    }\n\n}\n"],"names":["constructor","uniqid","editor","userId","source","selectionbarSource","this","selection","getContent","length","mode","constants","modalModes","toolbarSource","menubarSource","general","modal","AiModal","create","templateContext","classes","headerclasses","show","setSelection","renderer","renderStart","getRoot","on","ModalEvents","outsideClick","event","preventDefault","insertAfterContent","textToInsert","setContent","replaceSelection","textReplacement","getDraftItemId","getContextId","getMode","getModal","getUserId"],"mappings":"+rBAyCIA,YAAYC,OAAQC,sCANX,oCACA,mCACD,kCACD,oCACE,WAGAD,OAASA,YACTC,OAASA,YACTC,QAAS,sBAAUD,8BAQNE,QACdA,SAAWC,4BAAsBC,KAAKJ,OAAOK,UAAUC,aAAaC,OAAS,OACxEC,KAAOC,qBAAUC,WAAWL,UAC1BH,SAAWS,uBAAiBT,SAAWU,6BACzCJ,KAAOC,qBAAUC,WAAWG,cAIhCC,YAAcC,eAAQC,OAAO,CAC9BC,gBAAiB,CACbC,QAAS,wBACTC,cAAe,gCAGlBL,MAAMM,OAEPhB,KAAKI,OAASC,qBAAUC,WAAWL,qCACpBD,KAAKL,QAAQsB,aAAajB,KAAKJ,OAAOK,UAAUC,oBAE7DgB,UAAW,sBAAYlB,KAAKL,cAE5BuB,SAASC,mBACVT,MAAMU,UAAUC,GAAGC,sBAAYC,cAAcC,QAC9CA,MAAMC,oBAKdC,mBAAmBC,mBACV/B,OAAOgC,WAAW5B,KAAKJ,OAAOM,aAAe,MAAQyB,aAAe,QAW7EE,iBAAiBC,sBACRlC,OAAOK,UAAU2B,WAAWE,iBAGrCC,wBACW,4BAAuB/B,KAAKJ,QAGvCoC,sBACW,0BAAyBhC,KAAKJ,QAGzCqC,iBACWjC,KAAKI,KAGhB8B,kBACWlC,KAAKU,MAGhByB,mBACWnC,KAAKH"}